A Temporal Model of Information Technology Project Performance. Efficiently delivering expected performance from information technology projects remains a critical challenge for many organizations. Improving our understanding of how various factors influence project performance is therefore an important research objective. This study proposes and tests a temporal model of information technology project performance (TMPP). It shows that performance can be better understood by separating risk factors into earlier (a priori) risk factors and later (emergent) risk factors, and modeling the influence of the former on the latter. Project performance, the dependent variable, is measured by considering both process (budget and schedule) and product (outcome) components. The model includes interactions between risk factors, project management practices, and project performance components. The model is tested using partial least squares analysis with data from a survey of 194 project managers. Our results indicate that the TMPP increases explanatory power when compared with models that link risk factors directly to project performance. The results show the importance for active risk management of recognizing, planning for, and managing a priori and emergent risk factors. The finding of a strong relationship between structural risk factors and subsequent volatility shows the need for risk management practice to recognize the interaction of a priori and emergent risk factors. The results confirm the importance of knowledge resources, organizational support, and project management practices, and demonstrate the ways in which they reinforce each other. 
A Survey of Enterprise Software Development Risks in a Flat World. COTS-based development and global delivery are two major disruptors in modern software development arena. Economic benefits offered by these disruptors cannot be neglected by organizations of any size. Unfortunately, alongside these benefits are several risk factors, which if ill-managed can cost the organizations both in terms of revenue and time. At Infosys, one of India's leading software services organizations, built upon global delivery model we conducted a study by interviewing representatives from 23 projects to identify risks pertinent to COTS-based development in a global setting. We found 6 frequently occurring risks that will be summarized in this paper. 
 
Top Fifty Software Risk Factors and the Best Thirty Risk Management Techniques in Software Development Lifecycle for Successful Software Projects. The concern of this study is to identify software risks and controls in the software development lifecycle. The aim of this study is to rank the software risks factors according to their importance and occurrence frequency based on the data source. The survey questionnaire is used to collect data and method of sample selection referred to as 'snowball' and distribution personal regular sampling was used. The seventy six software project managers have participated in this study who works in the Palestinian software development. Fifty software risk factors in all phases SDLC and thirty risk management techniques were presented to respondents. The results show that all risks in software projects were significant and important in software project manager's perspective. However, the ranking of the importance of the risks is assigned according to it: Analysis, planning, maintenance, design, and implementation. In addition, the top ten software risk factors in software development are selected and used for further analysis such as: Risk 13, Risk 14, Risk15, Risk16, Risk11, Risk18, Risk12, Risk50, Risk19, and Risk 9. The concern of this paper the top ten controls are used to model its relationship with the risk, such as: C29, C30, C20, C27, C21, C19, C28, C25, C26, and C23. Software risks can be modelled empirically with risk management control techniques. We recommended applying more studies in software risk management practices with real world companies and building tools to identification and analysis software risks based on quantitative and intelligent techniques. 
Identifying Software Project Risks: An International Delphi Study. Advocates of software risk management claim that by identifying and analyzing threats to success (i.e., risks) action can be taken to reduce the chance of failure of a project. The first step in the risk management process is to identify the risk itself, so that appropriate countermeasures can be taken. One problem in this task, however, is that no validated lists are available to help the project manager understand the nature and types of risks typically faced in a software project. This paper represents a first step toward alleviating this problem by developing an authoritative list of common risk factors. We deploy a rigorous data collection method called a “ranking-type” Delphi survey to produce a rank-order list of risk factors. This data collection method is designed to elicit and organize opinions of a panel of experts through iterative, controlled feedback. Three simultaneous surveys were conducted in three different settings: Hong Kong, Finland, and the United States. This was done to broaden our view of the types of risks, rather than relying on the view of a single culturean aspect that has been ignored in past risk management research. In forming the three panels, we recruited experienced project managers in each country. The paper presents the obtained risk factor list, compares it with other published risk factor lists for completeness and variation, and analyzes common features and differences in risk factor rankings in the three countries. We conclude by discussing implications of our findings for both research and improving risk management practice. 
Software Risk Management: Principles and Practices. The emerging discipline of software risk management is described. It is defined as an attempt to formalize the risk-oriented correlates of success into a readily applicable set of principles and practices. Its objectives are to identify, address, and eliminate risk items before they become either threats to successful software operation or major sources of software rework. The basic concepts are set forth, and the major steps and techniques involved in software risk management are explained. Suggestions for implementing risk management are provided. 
Modelling and Evaluating Software Project Risks with Quantitative Analysis Techniques in Planning Software Development. Risk is not always avoidable, but it is controllable. The aim of this paper is to present new techniques which use the stepwise regression analysis to model and evaluate the risks in planning software development and reducing risk with software process improvement. Top ten software risk factors in planning software development phase and thirty control factors were presented to respondents. This study incorporates risk management approach and planning software development to mitigate software project failure. Performed techniques used stepwise regression analysis models to compare the controls to each of the risk planning software development factors, in order to determine and evaluate if they are effective in mitigating the occurrence of each risk planning factor and, finally, to select the optimal model. Also, top ten risk planning software development factors were mitigated by using control factors. The study has been conducted on a group of software project managers. Successful project risk management will greatly improve the probability of project success. 
Identifying Usability Risk: A Survey Study. As defined in various quality models, usability is recognized as an important attribute of software quality. Failing to address usability requirements in a software product could lead to poor quality and high usability problems in software product. Research is still in progress to introduce the best methods for reducing usability problems and increase the rate of successful usable software products. Studies have shown that problems in software products can also be controlled using Software Risk Management methods, even though these problems cannot be eliminated totally. Using Software Risk Management, problems in software products are dealt before it occurs. This paper presents usability problems as a risk factor and by managing usability risk at earlier phases of the development process, successful and high usability software products can be developed. Unfortunately, currently there is little effort in identifying, analyzing and prioritizing potential usability risks at earlier phases of the development process. This paper focuses on usability risk identification as it is the first stage in usability risk management. This paper presents the results of an industry survey based on the opinion of Malaysian Public Sector involving sample size of 330 software developers and software projects managers regarding potential usability risk that could occur during Software Development Life Cycle (SDLC). Our finding has identified 42 potential usability risks, defined as a list for further risk analysis in future. 
Characterization of Risky Projects based on Project Managers' Evaluation. During the process of software development, senior managers often find indications that projects are risky and take appropriate actions to recover them from this dangerous status. If senior managers fail to detect such risks, it is possible that such projects may collapse completely. In this paper, we propose a new scheme for the characterization of risky projects based on an evaluation by the project manager. In order to acquire the relevant data to make such an assessment, we first designed a questionnaire from five viewpoints within the projects: requirements, estimations, team organization, planning capability and project management activities. Each of these viewpoints consisted of a number of concrete questions. We then analyzed the responses to the questionnaires as provided by project managers by applying a logistic regression analysis. That is, we determined the coefficients of the logistic model from a set of the questionnaire responses. The experimental results using actual project data in Company A showed that 21 projects out of 32 were predicted correctly. Thus we would expect that the proposed characterizing scheme is the first step toward predicting which projects are risky at an early phase of the development. 
An Empirical Approach to Characterizing Risky Software Projects Based on Logistic Regression Analysis. During software development, projects often experience risky situations. If projects fail to detect
such risks, they may exhibit confused behavior. In this paper, we propose a new scheme for characterization of the level of confusion exhibited by projects based on an empirical questionnaire. First, we designed a questionnaire from five project viewpoints, requirements, estimates, planning, team organization, and project management activities. Each of these viewpoints was assessed using questions in which experience and knowledge of software risks are determined. Secondly, we classify projects into 'confused' and 'not confused', using the resulting metrics data. We thirdly analyzed the relationship between responses to the questionnaire and the degree of confusion of the projects using logistic regression analysis and constructing a model to characterize confused projects. The experimental result used actual project data shows that 28 projects out of 32 were characterized correctly. As a result, we concluded that the characterization of confused projects was successful. Furthermore, we applied the constructed model to data from other projects in order to detect risky projects. The result of the application of this concept showed that 7 out of 8 projects were classified correctly. Therefore, we concluded that the proposed scheme is also applicable to the detection of risky projects. 
How Software Project Risk Affects Project Performance: An Investigation of the Dimensions of Risk and an Exploratory Model. To reduce the high failure rate of software projects, managers need better tools to assess and manage software project risk. In order to create such tools, however, information systems researchers must first develop a better understanding of the dimensions of software project risk and how they can affect project performance. Progress in this area has been hindered by: (1) a lack of validated instruments for measuring software project risk that tap into the dimensions of risk that are seen as important by software project managers, and (2) a lack of theory to explain the linkages between various dimensions of software project risk and project performance. In this study, six dimensions of software project risk were identified and reliable and valid measures were developed for each. Guided by sociotechnical systems theory, an exploratory model was developed and tested. The results show that social subsystem risk influences technical subsystem risk, which, in turn, influences the level of project management risk, and ultimately, project performance. The implications of these findings for research and practice are discussed. 

