International Journal of Software Engineering and Its Applications
Vol.8, No.2 (2014), pp.51-58
http://dx.doi.org/10.14257/ijseia.2014.8.2.06
Identifying Causality Relation between Software Projects Risk
Factors
Haneen Hijazi1, Shihadeh Alqrainy2, Hasan Muaidi2 and Thair Khdour2
1 Software Engineering Department, Hashemite University, Zarqa, JORDAN
2 Faculty of Information Technology, Albalqa Applied University, Salt, JORDAN
{haneen}@hu.edu.jo, {alqrainy, alserhan, khdour}@bau.edu.jo
Abstract
Software development process is vulnerable to different risk factors. Several works were
done in order to identify these factors and to introduce new ones. On the other hand, little
research has been conducted around investigating the relationship between these risk factors.
In this paper, a detailed set of software risk factors were examined. It was found that the
relationship between these factors is a (cause- effect) relationship. As a result, a causality
table and a cause-effect diagram are introduced to illustrate this causality relationship.
Keywords: Causality, cause-effect, risk, risk factor
1. Introduction
Software development process is vulnerable to different risks. Each phase of the Software
Development Life Cycle (SDLC) is susceptible to several risk factors. Each of these factors
threaten project success by causing major software projects risks such as time delay, budget
overrun, and/or bad quality product either directly or indirectly.
First of all, we have to distinguish between two terms; risk and risk factor. In general, risk
is the possibility of suffering loss [1]. The definition of risk involves two distinct terms:
uncertainty and loss [2]. In software projects, this loss corresponds to the unwanted negative
effects such as time delay, budget overrun, and bad quality software system [3]. Uncertainty
includes events which may or may not happen [4]. The sources of the negative project effect
are called “risk factors” [5].
Thus, risk factors are the uncertain conditions and influences that affect the cost, duration,
and quality of the project negatively. If these factors are ignored or not mitigated well, they
will present serious threats that hinder the software projects from completing successfully and
achieving its goals and expected outcomes [6].
In short, we can conclude that a risk factor is a source of project risk which, in turn, can be
either delay in time, loss in budget, poor quality (or any combination).
Recently, many researchers have become interested in identifying software projects risk
factors. This is due to the fact that software projects risk factors change overtime, and thus
regular software risk identification studies have to be conducted from time to time in order to
identify more and more risk factors. In this regard, the literature is rich in such studies
concerned with the identification of different software projects risk factors. Other researchers
are interested in managing these factors by proposing risk management strategies, models,
and methodologies that guarantee the avoidance of the majority of risks throughout the
development process. None of all of these researchers can deny the importance of defining
the relationship between software projects risk factors in the risk management process.
Despite that, little researchers tackled this issue in their research.
ISSN: 1738-9984 IJSEIA
Copyright ⓒ 2014 SERSC
International Journal of Software Engineering and Its Applications
Vol.8, No.2 (2014)
In this paper, similar works related to the risk identification process besides the trials to
identify the relations between risk factors are described. Then the relationship among a
detailed list of risk factors is examined, and the causality relationship is highlighted. Lastly, a
causality table and a cause-effect diagram are introduced.
2. Related Work
As mentioned before, the literature is rich in works around the risk identification
process. On the other hand, little work has been conducted around identifying the
relationship between risk factors.
Keil et al., [7], in 1998, classified risks into four categories upon the fact that there is a
relation between the importance of risks and their perceived level of control. Then, mitigation
strategies were devised to handle each type of risks instead of each risk individually. Addison
and Vallabh [8], in 2002, listed a list of risk factors and controls and identified the importance
of each risk factor, the frequency of occurrence for each risk factor and control, and the
effectiveness of each control against each factor. In 2007, Arshad et al., [9] identified forty
four risk factors and classified them into six categories (i.e., organizational, environment,
project team, user, project requirements, project complexity, and project management).
Shahzad and Iqbal [10], in 2007, made a trial to find the most frequently occurring risks in
each phase of the SDLC. Shahzad and Al-Mudimigh [11], in 2010, proposed a risk
identification, mitigation, and avoidance model (RIMAM) for handling software development
risks. Shahzad et al., [12], in 2010, prioritized a previously defined list of risk factors
according to the overall impact for each factor.
3. The Causality Relationship
In order to identify the relationship between software risk factors, an exhaustive list of risk
factors was adapted [13]. This list is the harvest of a comprehensive literature survey
investigated the SDLC phases, activities, problems and risks, predefined ready-made
checklist and taxonomies, plus the experience of highly qualified project managers,
developers, and academics interested in the domain. In this list the sources of risks in each of
the five phases of the SDLC phases is defined. All of these risk factors are introduced in table
1. Moreover, each of these factors is indexed (i.e., given an identification number from (1 to
100)).
After identifying the major risk factors threaten the SDLC, it would be of utmost important
to understand the relationships between these factors. An in-depth study of these factors will
uncover the hidden relationships between them. The examiner will notice that the dominant
relationship is a (cause-effect) relationship, in which each risk factor is affected by other
factors and affects others.
Causality (or the cause-effect relationship) is the relation between an event (the cause) and
a second event (the effect), where the second event is understood as a consequence of the first
[14]. Anything that affects an effect is a factor of that effect. Hence, it also can be defined as
the relation between a set of factors (causes) and the effect.
In software projects, when we study the relationships between risk factors in the SDLC, we
actually identify the causes of appearance of each risk factor in the SDLC. Any risk factor
does not come out of nowhere; each risk factor can be considered as a consequence from
other factors and other specific project characteristics.
In software projects, a software risk factor may directly affect the time schedule, cost, or
the quality of the final product. Either, it may affect other phases creating another risk factor
which may in turn affect time, cost, and quality directly or indirectly by influencing other
52
Copyright ⓒ 2014 SERSC
International Journal of Software Engineering and Its Applications
Vol.8, No.2 (2014)
factors, and so on. In sum, each risk factor will lastly affect cost, schedule, or quality either
directly “Direct Factor” or indirectly “Intermediate Factor” through a sequence of dependent
factors.
Identifying the causality between risk factors is very important. It helps project managers
and developers prioritize risks; the risk factor that affects the highest number of other risks
will often be given the highest priority. This would allow developers to implement the
appropriate risk management strategies to handle the maximum number of potential risk
factors early in the development process. Table 1 shows an indexed list of 100 risk factors,
each factor is associated with the indices of the affected factors.
From another side, the best way to visually represent the causality relation between the
identified risk factors is to use the Ishikawa diagrams (or Fishbone diagram). It is a diagram
used to represent the cause-effect relation in management and engineering [15]. It was first
introduced by Kaoru Ishikawa in 1968, and usually used to identify potential factors causing
an overall effect. The fishbone diagram usually consists of the problem statement (i.e., the
overall effect), attached to a line (main bone) with several lines coming into this main bone
represent the factors. Usually, factors are grouped into categories according to a specific
criterion you decide upon, and then lines are labelled with these categories names.
Herein, the project failure is considered as the problem statement. Each factor is assigned
to the specific SDLC phase it affects (i.e., grouping criteria). Thus, five main lines come into
the main bone which is attached to the project failure effect. Many other solid lines are used
to represent the sub-factors (i.e., herein, the causality within the phase). Dashed lines are used
to represent the causality between factors among the phases. Figure 1 represents the causeeffect
diagram for software projects risks and risk factors. This diagram shows the flow of
risk factors, and how each risk factor directly or indirectly affects the cost, schedule, and/or
the quality of the final product.
Index
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
Table 1. Causality Table
Risk Factor
Phase 1: Requirements Analysis and Definition
Inadequate estimation of project time, cost, scope and other
resources
Unrealistic Schedule
Unrealistic Budget
Unclear Project Scope
Insufficient resources
Unclear Requirements
Incomplete Requirements
Inaccurate Requirements
Ignoring the Non-functional requirements
Conflicting User Requirements
Unclear Description of the real environment
Gold Plating
Non-verifiable Requirements
Infeasible Requirements
Inconsistent Requirements
Non-traceable Requirements
Unrealistic Requirements
Misunderstood domain-specific terminology
Mis-expressing user requirements in natural language
Copyright ⓒ 2014 SERSC
Affected Factors
2,3,4,5, 29,73
14
14
6,7,8,12
14,28,53
8,13,17
17,94
17
7
15
74,82
17,30,79
17
17
21
22,32
20
20
53
International Journal of Software Engineering and Its Applications
Vol.8, No.2 (2014)
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
Inconsistent requirements data and RD
Non-modifiable RD
Phase 2: Design
RD is not clear for developers
Improper AD method choice
Improper choice of the PL
Too much complex system
Complicated Design
Large size components
Unavailable expertise for reusability
Less reusable components than expected
Difficulties in verifying design to requirements
Many feasible solutions
Incorrect Design
Difficulties in allocating functions to components
Extensive specification
Omitting data processing functions
Large amount of tramp data
Incomplete DD
Large DD
Unclear DD
Inconsistent DD
Phase 3: Implementation and Unit Testing
Non-readable DD
Programmers cannot work independently
Developing the wrong user functions and properties
Developing the wrong user interface
PL does not support architectural design
Modules are developed by different programmers
Complex, ambiguous, inconsistent code
Different versions for the same component
Developing components from scratch
Large amount of repetitive code
Inexperienced Programmers
Too many syntax errors
Technology change
High fault rate in newly designed components
Code is not understandable by reviewers
Lack of complete automated testing tools
Testing is monotonous, boring and repetitive
Informal and ill-understood testing process
Not all faults are discovered in unit testing
Poor documentation of test cases
Data needed by modules other than the under testing one
Coding Drivers and Stubs
Poor Regression Testing
Phase 4: Integration and System Testing
Difficulties in ordering components' integration
Integrate the wrong version of components
Omissions or oversights
A lot of bugs emerged during the integration
22
92
23,33
24
23,45
26,27,31,75,92
36,39,50
33
49
49
40
39
35
38
37
68
42
41
41
41,45
43
43
69
-
47,48
55
65
54
43,44,52,47
-
59
57,59,60,63
59
67
71
62
54
67
66,70
67,69
67,69
71
54
Copyright ⓒ 2014 SERSC
International Journal of Software Engineering and Its Applications
Vol.8, No.2 (2014)
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
Data Loss across an interface
Integration may not produce the desired functionality
Difficulties in localizing errors
Difficulties in repairing errors
Unqualified testing team
Limiting testing resources
Inability to test in the operational environment
Impossible complete testing (Coverage Problem)
Testers rely on process myths
Testing cannot cope with requirements change
Wasting time in Building testing
The system being tested is not testable enough
Phase 5: Operation and Maintenance
Problems in installation
The effect on the environment
Change in environment
New requirements emerge
Difficulties in using the system
User resistance to change
Missing capabilities
Too many software faults
Testers does not perform well
Suspension and Resumption problems
Insufficient data handling
The software engineer cannot reproduce the problem
Problems in maintainability
Budget not enough for maintenance activities
Risks Common to all SDLC phases
Continually changing requirements
Project Funding Loss
Team Turnover
Data Loss
Time contention
Miscommunication
Budget Contention
67
71
87
73,78
78
87
77
82,83
-
85
80,83,84
85
88
87
89
87,91
87
-
77,83
Copyright ⓒ 2014 SERSC
55
International Journal of Software Engineering and Its Applications
Vol.8, No.2 (2014)
Figure 1. Risk Factors - Cause-effect Diagram
56
Copyright ⓒ 2014 SERSC
International Journal of Software Engineering and Its Applications
Vol.8, No.2 (2014)
4. Conclusion and Future Work
In this paper, a detailed list of software projects risk factors was examined deeply. It was
found that the relationship between software projects risk factor is a cause-effect (or
causality) relation. To clarify this, a causality table and a cause-effect diagram were
introduced. These can help project managers and researchers in prioritizing the most
dangerous risks which can result in the largest number of affected risk factors and then
designing strategies to (mitigate/avoid) them. This would reduce the maximum number of
risks with the minimum number of strategies. Clearly, this would reduce time, effort, and cost
needed to manage project risks.
References
[1] B. W. Boehm, “Software Risk Management Principles and Practices”, IEEE Software, vol. 8, no. 1, (1991),
pp. 32-41.
[2] P. L. Bannerman, “Risk and Risk Management in Software Projects: A reassessment”, Journal of Systems
and Software, vol. 81, no. 12, (2008), pp. 2118-2133.
[3] Y. Tao, “A Study of Software Development Project Risk Management”, Proceedings of the International
Seminar on Future Information Technology and Management Engineering, IEEE, (2008).
[4] J. Nyfjord and M. Kajko-Mattsson, “Commonalities in Risk Management and Agile Process Models”,
Proceedings of the Second International Conference on Software Engineering Advances, Cap Esterel, French
Riviera, France, (2007) August 25-31.
[5] Y. Hu, X. Zhang, X. Sun, J. Zhang, J. Du and J. Zhao, “A Unified Intelligent Model for Software Project
Risk Analysis and Planning”, Proceedings of the 3rd International Conference on Information Management,
Innovation Management and Industrial Engineering, Kunming, China, (2010) November 26-28.
[6] S. J. Huang and W. M. Han, “Exploring the Relationship between Software Project Duration and Risk
Exposure: A Cluster Analysis”, Information and Management, vol. 45, no. 3, (2008), pp. 175-182.
[7] M. Keil, P. E. Cule, K. Lyytinen and R. C. Schmidt, “A Framework for Identifying Software Project Risks”,
Communications of the ACM, vol. 4, no. 11, (1998), pp. 76-83.
[8] T. Addison and S. Vallabh, “Controlling Software Project Risks: An Empirical Study of Methods used by
Experienced Project Managers”, Proceedings of the Annual Research Conference of the South African
Institute of Computer Scientists and Information Technologists on Enablement through technology,
Elizabeth, South Africa, (2002) September 16-18.
[9] N. H. Arshad, A. Mohamed and Z. M. Nor, “Risk Factors in Software Development Projects”, Proceedings
of the 6th WSEAS International Conference on Software Engineering, Parallel and Distributed Systems,
Corfu Island, Greece, (2007) February 16-19.
[10] B. Shahzad and J. Iqbal, “Software Risk Management Prioritization of Frequently Occurring Risk in
Software Development Phases”, Using Relative Impact Risk Model. Proceedings of the 2nd International
Conference on Information and Communication Technology, IBA Karchi, (2007) December 16-17.
[11] B. Shahzad and A. S. Al-Mudimigh, “Risk Identification, Mitigation and Avoidance Model for Handling
Software Risk”, Proceeding of the Second International Conference on Computational Intelligence,
Communication Systems and Networks, Liverpool, UK, (2010) July 28-10.
[12] B. Shahzad and S. A. Safvi, “Risk Mitigation and Management Scheme based on Risk Priority”, Global
Journal of Computer Science and Technology, vol. 10, no. 4, (2010), pp. 108-113.
[13] H. Hijazi, S. Alqrainy, H. Muaidi and T. Khdour, “Risk Factors in Software Development Phases”, European
Scientific Journal, vol. 10, no. 3, (2014), pp. 213-132.
[14] Random House Unabridged Dictionary.
[15] K. Ishikawa, “Guide to Quality Control”, Tokyo: JUSE, (1968).
Copyright ⓒ 2014 SERSC
57
International Journal of Software Engineering and Its Applications
Vol.8, No.2 (2014)
Authors
Haneen Hijazi holds an M.Sc. Degree in Computer Science with a
concentration in Software Engineering; she received the degree in 2012
from Albalqa Applied University. She got her B.Sc. degree in Software
Engineering from the Hashemite University, Jordan, in 2006. Currently,
she works as a computer lab supervisor in the Software Engineering
Department at the Hashemite University. In her research, she is interested
in software engineering with an emphasis on projects and risk
management, e-learning, and Natural Language Processing.
Shihadeh Alqrainy received his B.Sc. and M.Sc. degrees in
Computer Science from Yarmouk University, Jordan, in 1985 and 2002,
respectively. During 1987-1999, he was a computer instructor and
training manager of one of the biggest computer institutes in K.S.A. On
completing his M.Sc. Degree in 2002, he started working as a full time
lecturer at Albalqa Applied University in Jordan. He got his Ph.D. degree
in Artificial Intelligence and Software Engineering from DeMontfort
University, Leicester, UK, in 2008. His prime research area of interest
within Artificial Intelligence is Natural Language Processing and
Understanding. He is working currently as an assistant professor and the
chairman of the Software Engineering Department at Albalqa Applied
University, Jordan.
Hasan Muaidi is an assistant professor in the Department of
Computer Science at Albalqa Applied University, Salt, Jordan. He
received his B.Sc. and M.Sc. degrees in Computer Science from
Yarmouk University, Jordan, in 1987 and 2002, respectively, and his
Ph.D. degree in Artificial Intelligence and Software Engineering from
DeMontfort University, Leicester, U.K, in 2008. His current research
interests include Artificial Intelligence, Artificial Neural Networks,
Arabic Natural Language Processing, Information Retrieval, and Expert
Systems.
Thair Khdour received his B.Sc. degree in Information Technology
from Albalqa Applied University in 2001 and his M.Sc. degrees in
Information Technology (Web Engineering and Design) from Western
Sydney University in 2003. He received his PhD degree in 2008 from
University of Essex, UK. His Ph.D. research was primarily in the field of
Artificial Intelligence. He has been working as an assistant professor
since 2008. Currently, he is the chairman of the Computer Information
System department at Albalqa Applied University, Jordan.
58
Copyright ⓒ 2014 SERSC