<document>
  <zone label="MET_BIB_INFO">Journal of Computing and Information Technology - CIT 23, 2015, 2, 123-139
doi:10.2498 /cit.1002457</zone>
  <zone label="GEN_OTHER">123</zone>
  <zone label="MET_TITLE">Modelling and Evaluating Software
Project Risks with Quantitative
Analysis Techniques in Planning
Software Development</zone>
  <zone label="MET_AUTHOR">Abdelrafe Elzamly1,2 and Burairah Hussin1</zone>
  <zone label="MET_AFFILIATION">1Information and Communication Technology, Universiti Teknikal Malaysia Melaka (UTeM), Malaysia
2Department of Computer Science, Faculty of Applied Sciences, Al-Aqsa University, Gaza, Palestine</zone>
  <zone label="BODY_CONTENT">Risk is not always avoidable, but it is controllable. The
aim of this paper is to present new techniques which use
the stepwise regression analysis to model and evaluate the
risks in planning software development and reducing risk
with software process improvement. Top ten software
risk factors in planning software development phase and
thirty control factors were presented to respondents. This
study incorporates risk management approach and planning
software development to mitigate software project
failure. Performed techniques used stepwise regression
analysis models to compare the controls to each of the
risk planning software development factors, in order to
determine and evaluate if they are effective in mitigating
the occurrence of each risk planning factor and, finally,
to select the optimal model. Also, top ten risk planning
software development factors were mitigated by using
control factors. The study has been conducted on a
group of software project managers. Successful project
risk management will greatly improve the probability of
project success.</zone>
  <zone label="MET_KEYWORDS">Keywords: software project management, risk management,
planning software development, software risk
factors, risk management techniques, stepwise regression
analysis techniques, quantitative techniques</zone>
  <zone label="BODY_HEADING">1. Introduction</zone>
  <zone label="BODY_CONTENT">Despite much research and progress in the area
of software project management, software development
projects still fail to deliver acceptable
systems on time and within budget. Much
of the failure could be avoided by managers'
pro-active maintenance and dealing with risk
factors rather than waiting for problems to occur
and then trying to react. Project management
and risk management have been proposed
as a solution to preserve the quality and integrity
of a project by reducing cost escalation
[1]. Due to the involvement of risk management
in monitoring the success of a software
project, analyzing potential risks, and making
decisions about what to do about potential risks,
the risk management is considered the planned
control of risk. Integrating formal risk management
with project management is a new phenomenon
in software engineering and product
management community. In addition, risk is
an uncertainty that can have a negative or positive
effect on meeting project objectives. Risk
management is the process of identifying, analyzing
and controlling risk throughout the life
of a project to meet the project objectives.
However, an intelligent performance analysis
approach is adapted for decision making to select
the optimization techniques to apply in real
world problem solving approach particularly related
to industrial engineering problems [2]. In
addition, the goal of risk management is early
identification and recognition of risks and then
actively changing the course of actions to mitigate
and reduce the risk [3]. In the process
of understanding the factors that contribute to
software project success, risk is becoming increasingly
important. This is a result of the size,
complexity and strategic importance of many of
the information systems currently being developed.
Today, we must think of risk as a part of
software project lifecycle which is important for
a software project survival. On the other hand,</zone>
  <zone label="GEN_OTHER">124</zone>
  <zone label="MET_BIB_INFO">Modelling and Evaluating Software Project Risks with Quantitative Analysis Techniques. . .</zone>
  <zone label="BODY_CONTENT">risk management aims to read risks as improvement
opportunities and provide inputs to growth
plans [4].
In our paper, we identified software planning
risk factors and risk management techniques
that guide software project managers to understand
and mitigate risks in software analysis
development projects. However, Software Development
Life Cycle, according to [5], is the
process of creating or altering systems, and the
models and methodologies that people use to
develop these systems. Also, it includes the
following phases: planning, analysis, design,
implementation, and maintenance. In addition,
we focused on the planning phase. During this
phase, the group that is responsible for creating
the system must first determine what the
system needs to do for the organization (new
requirements gathering) and evaluate existing
system/software. Risk management is a practice
of controlling risk and the practice consists
of processes, methods and tools for managing
risks in a software project before they become
problems [6].
This study will guide software managers to apply
software risk management practices with
real world software development organizations
and verify the effectiveness of the modelling
techniques on a software project. We hope
that the approaches will succeed in the software
risk management methodology, which will
improve the probability of software project success.
The objectives of this study are: to identify
the software risk factors of planning software
development in the Palestinian software
development organizations, to rank the software
risk factors in planning software development
according to their importance, severity
and occurrence frequency based on data source,
to identify the activities performed by software
project managers, to model and evaluate the
identified risks in the planning of software development.
According to Taylor, we should apply techniques
consistently throughout the software project
risk management process [7] Risk management
is a practice of controlling risk and the
practice consists of processes, methods, and
tools for managing risks in a software project
before they become problems [6]. Therefore,
Boehm talked about value-based risk management,
including principles and practices for risk
identification, analysis, prioritization, and mitigation
[8].</zone>
  <zone label="BODY_HEADING">2. Literature Review</zone>
  <zone label="BODY_CONTENT">Previous studies had shown that risk mitigation
in software projects are classified into three
categories - namely, qualitative, quantitative
and mining approaches. Firstly, quantitative
risk is based on statistical methods that deal
with accurate measurement about risk or lead to
quantitative inputs that help to form a regression
model to understand how software project risk
factors influence project success. Furthermore,
qualitative risk techniques lead to subjective
opinions expressed or self-judgment by software
manager using techniques, namely scenario
analysis, Delphi analysis, brainstorming
session, and other subjective approaches to mitigate
risks. Elzamly and Hussin [9] improved
quality of software projects of the participating
companies while estimating the quality affecting
risks in IT software projects. The results
show that there were 40 common risks in
software projects of IT companies in Palestine.
The amount of technical and non-technical difficulties
was very large. Khanfar, Elzamly, et al.
[10], the new technique used the chi-square (ÔÅ£ 2)
test to control the risks in a software project.
However, we also used new techniques which
are the regression test and effect size test proposed
to manage the risks in a software project
and reduce risk with software process improvement
[11]. Furthermore, we used the new stepwise
regression technique to manage the risks
in a software project. These tests were performed
using regression analysis to compare
the controls to each of the risk factors to determine
if they are effective in mitigating the
occurrence of each risk factor implementation
phase [12]. In addition, we proposed the new
mining technique that use the fuzzy multiple regression
analysis techniques to manage the risks
in a software project. However, these mining
tests were performed using fuzzy multiple regression
analysis techniques to compare the risk
management techniques to each of the software
risk factors to determine if they are effective in
mitigating the occurrence of each software risk
factor [13]. Further, the fuzzy regression analysis
modelling techniques are used to manage
the risks in a planning software development</zone>
  <zone label="MET_BIB_INFO">Modelling and Evaluating Software Project Risks with Quantitative Analysis Techniques. . .</zone>
  <zone label="GEN_OTHER">125</zone>
  <zone label="BODY_CONTENT">project. Top ten software risk factors in planning
phase and thirty risk management techniques
were presented to respondents [14]. In
addition, we identified and managed the maintenance
risks in a software development project
by using fuzzy multiple regression analysis [15].
Also, we proposed new mining techniques that
use the fuzzy multiple regression analysis techniques
with fuzzy concepts to manage the software
risks in a software project. Top ten software
risk factors in analysis phase and thirty
risk management techniques were presented to
respondents. However, these mining tests were
performed using fuzzy multiple regression analysis
techniques to compare the risk management
techniques with each of the software risk
factors in order to determine if they are effective
in reducing the occurrence of each software risk
factor [16]. Also, the paper aimed to present a
new mining technique to identify the risk management
techniques that are effective in reducing
the occurrence of each software implementation
risk [17]. In addition, we proposed the
new quantitative and mining techniques to compare
the risk management techniques to each of
the software maintenance risks in order to identify
and model if they are effective in mitigating
the occurrence of each software maintenance
risk in software development life cycle [18].
Furthermore, we presented the stepwise multiple
regression analysis technique and Durbin
Watson technique to reduce software maintenance
risks in a software project [19].
The authors continue the effort to enrich the
managing software project risks considering
mining and quantitative approach with large
data set. Two techniques are introduced, namely
stepwise multiple regression analysis and fuzzy
multiple regression to manage the software risks
[20]. This paper aims to present new techniques
to determine if fuzzy and stepwise regression
are effective in mitigating the occurrence of
software risk factor in the implementation phase
[21]. Finally, risk management methodology
that has five phases: risk identification (planning,
identification, prioritization), risk analysis
and evaluation (risk analysis, risk evaluation),
risk treatment, risk controlling, risk communication
and documentation relied on three categories
or techniques such as risk qualitative analysis,
risk quantitative analysis and risk mining
analysis throughout the life of a software project
to meet the goals [22]. Although there are many
methods in software risk management, software
development projects have a high rate of risk
failure. Thus, if the complexity and size of the
software projects are increased, managing software
development risk becomes more difficult
[23]. There are several software risk management
approaches, models, and frameworks according
to a literature review.</zone>
  <zone label="BODY_HEADING">3. Top 10 Software Risk Factors in
Planning Software Development Phase</zone>
  <zone label="BODY_CONTENT">We displayed the top ten software risk factors in
planning software development project lifecycle
that is most commonly used by researchers
when studying the risk in software projects.
However, the list consists of the 10 most serious
risks to a project ranked from one to ten,
each risk's status, and the plan for addressing
each risk. These factors need to be addressed
and thereafter they need to be controlled. Consequently,
we presented 'top-ten' based on survey
Boehm's 10 risk items 1991 on software
risk management [24], the top 10 risk items according
to a survey of experienced project managers,
Boehm's 10 risk items 2002 and Boehm's
10 risk items 2006-2007, Miler [25], The Standish
Group survey [26], Addison and Vallabh
[27], Addison [28], Khanfar, Elzamly et al. [10],
Elzamly and Hussin [11], Elzamly and Hussin
[9], Aloini et al. [29], Han and Huang [30] [31],
Aritua et al. [32], Schmidt et al. [33], Mark Keil
et al. [34], Nakatsu and Iacovou [35], Chen and
Huang [36], Mark Keil et al. [37], Wallace et
al. [38], Sumner [39], Boehem and Ross [40],
Ewusi-Mensah [41], Pare et al. [42], Houston et
al. [43], Lawrence et al. [44], Shafer and Officer
[45], hoodat and Rashidi [23], Jones et al.
[46], Jones [47], Taimour [48], and other scholars,
researchers in software engineering, to obtain
software risk factors and risk management
techniques. These software project risks are
illustrated in Table 1.</zone>
  <zone label="BODY_HEADING">4. Risk Management Techniques</zone>
  <zone label="BODY_CONTENT">Through reading the existing literature on software
risk management approach and methodology,
we listed thirty control factors that are
considered important in reducing and modeling</zone>
  <zone label="GEN_OTHER">126</zone>
  <zone label="MET_BIB_INFO">Modelling and Evaluating Software Project Risks with Quantitative Analysis Techniques. . .</zone>
  <zone label="BODY_CONTENT">Dimension
No</zone>
  <zone label="GEN_OTHER">t
n
e
m
p
o
l
e
v
e
d
e
r
a
w
t
f
o
s
g
n
i
n
n
a
l
P
1
2
3
4
5
6
7
8
9
10</zone>
  <zone label="BODY_CONTENT">Software risk factors
Low key user involvement
Unrealistic schedules and budgets
Unclear / misunderstood / unrealistic / change scope and objectives (goals)
Insufficient/inappropriate staffing
Lack of senior management commitment and technical leadership
Poor /inadequate planning and strategic thinking
Lack of effective software project management methodology
Change in organizational management during the software project
Ineffective communication software project system
Absence of historical data (templates)
Total frequency
Frequency
14
14
8
8
8
7
6
5
3
2
75
Table 1. Illustrates top ten software risk factors in software projects according to researchers.
the software risk factors identified in planning
software development; these controls are:
C1: Using of requirements scrubbing, C2: Stabilizing
requirements and specifications as early
as possible, C3: Assessing cost and scheduling
the impact of each change on requirements and
specifications, C4: Developing prototyping and
having the requirements reviewed by the client,
C5: Developing and adhering a software project
plan, C6: Implementing and following a communication
plan, C7: Developing contingency
plans to cope with staffing problems, C8: Assigning
responsibilities to team members and
rotate jobs, C9: Having team-building sessions,
C10: Reviewing and communicating progress
to date and setting objectives for the next phase,
C11: Dividing the software project into controllable
portions, C12: Reusable source code
and interface methods, C13: Reusable test plans
and test cases, C14: Reusable database and
data mining structures, C15: Reusable user
documents early, C16: Implementing/utilizing
automated version control tools, C17: Implementing/utilizing
benchmarking and tools of
technical analysis, C18: Creating and analyzing
process by simulation and modeling, C19:
Providing scenarios and methods and using the
reference checking, C20: Involving management
during the entire software project lifecycle,
C21: Including formal and periodic risk assessment,
C22: Utilizing change control board
and exercising quality change control practices,
C23: Educating users on the impact of changes
during the software project, C24: Ensuring
quality-factor deliverables and task analysis,
C25: Avoiding having too many new functions
on software projects, C26: Incremental
development (deferring changes to later increments),
C27: Combining internal evaluations
by external reviews, C28: Maintaining proper
documentation of each individual's work, C29:
Providing training in the new technology and
organizing domain knowledge training, C30:
Participating of users during the entire software
project lifecycle.</zone>
  <zone label="BODY_HEADING">5. Empirical Strategy</zone>
  <zone label="BODY_CONTENT">Data collection was achieved through the use
of a structured questionnaire and historical data
to assist in estimating the quality of software
through determining risks that were common
to the majority of software projects in the analyzed
software companies. Top ten software
risk factors and thirty control factors were presented
to respondents. The method of sample
selection referred to as 'snowball' and distribution
of personal regular sampling was used.
This procedure is appropriate when members of
homogeneous groups (such as software project
managers, IT managers) are difficult to locate.
Seventy six software project managers participated
in this study. The project managers that
participated in this survey came from specific,
mainly software project management in software
development organizations.</zone>
  <zone label="MET_BIB_INFO">Modelling and Evaluating Software Project Risks with Quantitative Analysis Techniques. . .</zone>
  <zone label="GEN_OTHER">127</zone>
  <zone label="BODY_CONTENT">Respondents were presented with various questions,
which used scales 1-7. For presentation
purposes in this paper and for effectiveness,
the point scale is as follows: For
choices being labeled 'unimportant' equals one,
and 'extremely important' equals seven. Similarly,
seven frequency categories were scaled
into 'never' equals one and 'always' equals
seven. All questions in software risk factors
were measured on a seven-point Likert scale
from unimportant to extremely important and
software control factors were measured on a
seven-point Likert scale from never to always.
However, to describe ‚ÄúSoftware Development
Company in Palestine‚Äù that has in-house development
software and a supplier of software
for local or international market, we depended
on Palestinian Information Technology Association
(PITA) Members' webpage at PITA's
website [PITA 2012 www.pita.ps/], Palestinian
investment promotion agency [PIPA 2012 http:
//www.pipa.gov.ps/] to select top IT managers
and software project managers. In order
to find the relation among risks that the software
projects confront and the counter measures
that should be taken to reduce risks, many
researchers used different statistical methods.
In this paper, we used correlation analysis and
regression analysis models based on stepwise
selection method and Durbin-Watson Statistic.
In general, the software risk management
methodology includes five phases named as risk
identification, risk analysis and evaluation, risk
treatment, risk controlling, risk communication
and documentation that contribute to the success
of any undertaking software project. We
started our risk management methodology by
risk identification of all possible software risks
in planning software development. Many risks
possibilities are taken from the past literature;
however, we take into consideration only the
top ten risk softwares for planning software
development based upon previous work. At
the same time, we also identify the possible
risk management techniques from the past literature.
Also we finished with 30 risk management
techniques that come from software
project risk management involving risk analysis
and evaluation, risk treatment, risk controlling,
risk communication and documentation, in order
to incorporate the quantitative approach and
software risk management methodology to mitigate
planning software risks.</zone>
  <zone label="BODY_HEADING">5.1. Correlation Analysis</zone>
  <zone label="BODY_CONTENT">Clearly, the preceding analysis states that there
are correlations between determining variables
besides correlation between risk factors and all
determining control factors. However, the equation
of Correlation Coefficient is the following:
r=
n [
(xi, yi)] ‚àí (
n(
xi2) ‚àí (
xi)2
n(
xi) (
yi)
yi2) ‚àí (
yi)2
(1)
5.2. Regression Analysis Model
Regression modeling is one of the most widely
used statistical modeling techniques for fitting
a response (dependent) variable Y as a function
of predictor (independent) variables Xi (multiple
regression).
Y = ÔÅ¢0 + ÔÅ¢1X1 + . . . + ÔÅ¢nXn + ÔÅ•
(2a)
Indeed, software risk factor is a dependent variable
while control factors are independent variables.
A linear equation between one dependent
and many independent variables may be
expressed as:
YÀÜ = b0 + b1X1 + b2X2 + . . . + bnXn
(2b)
where b0, b1, b2, . . . and bn are regression coefficients;
X1, X2, . . . and Xn are the independent
variables, and Y is the dependent variable. The
values of b0, b1, b2, . . . and bn of the multiple
regression equation may be obtained by solving
the linear equations system [49].</zone>
  <zone label="BODY_HEADING">5.3. Stepwise Regression
(Adds and Removes Variables)</zone>
  <zone label="BODY_CONTENT">According to [50], [51], stepwise regression
method (SRM) combines and alternates between
forward selection and backward elimination.
At each step, the best remaining variable
is added, provided it passes the 5% significance
level, and then all variables currently
in the regression are checked to see if any can
be removed, using the greater than 10% significance
criterion. In addition [51], the MSRA
method is a stepwise optimization process of</zone>
  <zone label="GEN_OTHER">128</zone>
  <zone label="MET_BIB_INFO">Modelling and Evaluating Software Project Risks with Quantitative Analysis Techniques. . .</zone>
  <zone label="BODY_CONTENT">system‚Äù were the highest software risk factors
and important ones. In fact, the risk factors
sorted in descending order of respective means
were identified as important which resulted in
the following ranking of importance of the listed
risks (in order of importance): Risk 9, Risk 10,
Risk 3, Risk 1, Risk 6, Risk 8, Risk 7, Risk 2,
Risk 4, Risk 5.
Mean
Std. Deviation
the multiple regression analysis method. Also,
a stepwise-regression method is applied which
systematically adds and removes model components
based on statistical test to automatically
identify the risks for a large scale data in operation
[52]. Therefore [50], SRM is particularly
useful when we need to predict a dependent
variable from a (very) large set of independent
variables.</zone>
  <zone label="BODY_HEADING">5.4. Coefficient of Determination</zone>
  <zone label="BODY_CONTENT">Coefficient of determination (R2) is the proportion
of variation in the observed values of the
response variable Y that is explained by the regression
YÀÜ [49]:
R2 =
RSS
TSS
=
(yÀÜ ‚àí yavg)2
(y ‚àí yavg)2
(3)
According to [49], regression sum of squares
(RSS) is the variation in the observed values of
the response variable Y that is explained by the
regression YÀÜ , while total sum of squares (TSS)
is the variation in the observed values of the
response variable Y.</zone>
  <zone label="BODY_HEADING">5.5. Durbin-Watson Statistic (D)</zone>
  <zone label="BODY_CONTENT">Durbin-Watson statistic is an index that tests for
autocorrelation (the relationship between values
separated from each other by a given time lag) in
the residuals (prediction errors) from a statistical
regression analysis (http://www.investopedia.com/terms/d/durbin-watson-stati-
stic.asp/2013/2/26). Consequently, we will
avoid using independent variables that have errors
with a strong positive or negative autocorrelation,
because this can lead to an incorrect
forecast for the dependent variable. However,
the value D always lies between 0 and 4 the
defined D-W statistic as:
D =
(ei ‚àí ei‚àí1)2
ei2
, for N and K‚àí1 df (4)
where N is the number of observations.</zone>
  <zone label="BODY_HEADING">5.6. Importance of Risk Factors in Planning
Software Development Phase</zone>
  <zone label="BODY_CONTENT">All respondents indicated that the software risks
of ‚Äúineffective communication software project
R3
R10
R9
R6
R1
R8
R7
R2
R4
R5
R10
R1
R5
R3
R9
R7
R6
R8
R4
R2
Table 2. Mean score for each risk factor (planning
software development).</zone>
  <zone label="BODY_HEADING">5.7. Ranking of Importance of Risk Factors
for Project Managers' Experience</zone>
  <zone label="BODY_CONTENT">Table 3 shows the overall ranking of importance
of each planning risk factor for the three categories
of project managers' experience.
Phase Risk Experience Experience Experience
2-5 years 6-10 years &gt; 10 years
Table 3. The overall risk ranking of each risk factor.
Risk
R9
R10
R3
R1
R6
R8
R7
R2
R4
R5
Total 76
N
76
76
76
76
76
76
76
76
76
76</zone>
  <zone label="GEN_OTHER">t
n
e
m
p
o
l
e
v
e
d
e
r
a
w
t
f
o
s
g
n
i
n
n
a
l
P</zone>
  <zone label="BODY_CONTENT">R1
R2
R3
R4
R5
R6
R7
R8
R9
R10
3.934
3.868
3.842
3.803
3.789
3.711
3.697
3.684
3.658
3.618
3.761
R9
R1
R6
R10
R3
R8
R5
R2
R4
R7
0.806
0.806
0.801
0.749
0.736
0.877
0.766
0.716
0.946
0.848
0.543
%
78.684
77.368
76.842
76.053
75.789
74.211
73.947
73.684
73.158
72.368
75.211
C1
.336**
C10
C12
.271*
C21
C2
.281*
C7
C14
.250*
C22
Model
1
2
R
.524a
.591b
Model
Residual
Total
Residual
Total</zone>
  <zone label="MET_BIB_INFO">Modelling and Evaluating Software Project Risks with Quantitative Analysis Techniques. . .</zone>
  <zone label="BODY_HEADING">5.8. Frequency of Occurrence of Controls</zone>
  <zone label="BODY_CONTENT">Table 4 shows the mean and the standard deviation
for each control factor. The results of this
paper show that most of the controls are used
most of the time and rather often.
Control Mean Std. Deviation
% percent
C29
C30
C20
C27
C21
C19
C28
C25
C26
C23
-C13
4.408
4.368
4.184
4.171
4.171
4.158
4.158
4.132
4.118
4.105
-3.868
0.803
0.907
0.668
0.755
0.7
0.612
0.767
0.718
0.653
0.741
-0.754
88.15789
87.36842
83.68421
83.42105
83.42105
83.15789
83.15789
82.63158
82.36842
82.10526
-77.36842
Table 4. Mean score for each control factor.</zone>
  <zone label="BODY_HEADING">5.9. Relationships Between Risks
and Control Variables</zone>
  <zone label="BODY_CONTENT">Regression technique was performed on the data
to determine whether there were significant relationships
between control factors and risk factors.
These tests were performed using stepwise
regression analysis model to compare the controls
to each of the risk planning software development
factors to determine and evaluate if
they are effective in mitigating the occurrence
of each risk factor. Significant relationships between
risks and controls, being important for the
optimal models, are presented in the continuation.
This study presents the model for software
risk management within planning software development
process.
R1: Risk of 'Low Key User Involvement'
compared to controls.
Table 5, Table 6, Table 7 and Table 8 show
that the obtained significant values (Sig.) are
all less than the selected significant level of
.433** .524**
C5
C9
C19
.251*</zone>
  <zone label="GEN_OTHER">129</zone>
  <zone label="BODY_CONTENT">C6
C11
C20
.309**
C3
.283*
C8
C15
.264*
C24
.285*
.275
.349
.373** .323** .438** .460** .384**
.443** .370**
*Correlation is significant at the 0.05 level (2-tailed).
**Correlation is significant at the 0.01 level (2-tailed).
Table 5. Illustrates correlations between respective
controls and R1.
R Square Durbin-Watson
1.729
a. Predictors: (constant), C6
b. Predictors: (constant), C6, C21
Table 6. Illustrates multiple correlations R,
and R square.
SSquumaroefs df SMqueaarne
F
Sig.
1 Regression 12.469 1 12.469 28.000 .000a
2 Regression 15.856 2
7.928 19.576 .000b
32.952 74 .445
45.421 75
29.565 73 .405
45.421 75
a. Predictors: (constant), C6 b. Predictors: (constant), C6, C21
c. Dependent variable: R1
Table 7. Illustrates an Analysis of Variance (ANOVAc).
Unstandardized Standardized
Coefficients Coefficients
Model
1 (constant)
2 (constant)
C6
C6
C21
b
2.429
.476
1.369
.381
.295
Beta
.524
.419
.293
t
Sig.
5.307 .000
5.292 .000
2.403 .019
4.140 .000
2.892 .005
Dependent variable: R1
Table 8. Illustrates the model coefficients, respective t
values and their significance
(coefficientsa, coefficientsb).</zone>
  <zone label="GEN_OTHER">130</zone>
  <zone label="MET_BIB_INFO">Modelling and Evaluating Software Project Risks with Quantitative Analysis Techniques. . .</zone>
  <zone label="BODY_CONTENT">ÔÅ° = 0.05, so there is a positive correlation
between controls 1, 2, 3, 5, 6, 7, 8, 9, 10,
11, 12, 14, 15, 19, 20, 21, 22, 24 and Risk 1
(Table 5). However, the results show that Controls
6 and 21 have a positive impact value of
r6 = 0.524 and r21 = 0.443 respectively with
Risk 1. The multiple correlation R is 0.591, the
value of R2 is 0.349 in the best model (stable
model, Tables 6 and 7). This means that the
Model 2 explained 34.9 % of the variability of
dependent variable Risk 1. Furthermore, the
Durbin-Watson statistic (D) is 1.729 and the table
gives the critical values based on K = 2
(regressors), N = 76, ÔÅ° = 0.05 (dU = 1.680,
dL = 1.571); there is evidence of no autocorrelation
(dU &lt; D &lt; 2 + dL: No autocorrelation).
However, we will avoid independent variables
that have errors with a strong positive and negative
correlation in the stepwise multiple regression
model, because this can lead to an incorrect
prediction based on independent variables.
R2: Risk of 'Unrealistic Schedules and
Budgets' compared to controls.
Table 9, Table 10, Table 11, and Table 12 show
that the obtained significant values are less than
the selected significant value of ÔÅ° = 0.05, so
there is a positive correlation between Controls
1, 3, 5, 6, 7, 8, 9, 10, 11, 24, 25, and Risk 2,
respectively. In addition, Control 1 has an impact
on Risk 2, and the results show that Control
1 has a positive impact value of R=0.389
and the value of R2 is 0.151. This means
that the model (Table 10) explained 15.1% of
C1
C3
C9
.232*
C10
.349**
C5
C11
.251*
C6
C24
C7
C25
.331** .238*
.389** .297** .330** .355** .243* .229*
C8
*Correlation is significant at the 0.05 level (2-tailed).
**Correlation is significant at the 0.01 level (2-tailed).
Model
SSquumaroefs df Square
Mean
1 Regression
5.817
1
Residual
Total
32.604 74
38.421 75
5.817
.441
F
Sig.
13.204 .001a
a. Predictors: (constant), C1
b. Dependent variable: R2
Table 11. Illustrates an Analysis of Variance
(ANOVAb).
Unstandardized Standardized
Coefficients Coefficients
Model
1 (constant)
C1
b
2.844
.376
Beta
.389
t
Sig.
5.553 .000
3.634 .001
a. Dependent variable: R2
Table 12. Illustrates the model coefficients, respective t
values and their significance (coefficientsa).
the variability of response Risk 2. Furthermore,
Durbin-Watson statistic (D) is 2.227, and
dU = 1.652, dL = 1.598 based on K = 1,
N = 76, ÔÅ° = 0.05; there is evidence of no
autocorrelation (dU &lt; D &lt; 2 + dL: No autocorrelation).
R3: Risk of 'Misunderstood / Unrealistic
Scope and Objectives (Goals)' compared to
controls.
Table 13, Table 14, Table 15, and Table 16 show
that the obtained significant values are less than
the selected significant value of ÔÅ° = 0.05, so
there is a positive correlation between Controls
1, 6, 10, 19, 30, and Risk 3, respectively. In addition,
Control 6 has an impact on Risk 3, and
C1
.254*
C6
.264*
C10
.247*
C19
.264*
C30
.235*
*Correlation is significant at the 0.05 level (2-tailed).
Table 9. Illustrates correlations between respective
controls and R2.
Table 13. Illustrates correlations between respective
controls and R3.
Model
1
R
.389a
R Square
Durbin-Watson
.151
2.227
Model
1
R
.264a
R Square
Durbin-Watson
.070
1.812
a. Predictors: (constant), C1
Table 10. Illustrates multiple correlation R,
and R square.
a. Predictors: (constant), C6
Table 14. Illustrates multiple correlation R,
and R square.</zone>
  <zone label="MET_BIB_INFO">Modelling and Evaluating Software Project Risks with Quantitative Analysis Techniques. . .</zone>
  <zone label="GEN_OTHER">131</zone>
  <zone label="BODY_CONTENT">Model
Sum of Mean
Squares df Square
1 Regression
4.702
1
Residual
Total
62.825 74
67.526 75
4.702
.849
F
Sig.
5.538 .021a
a. Predictors: (constant), C6 b. Dependent variable: R3
Table 15. Illustrates an Analysis of Variance
(ANOVAb).
Unstandardized Standardized
Coefficients Coefficients
Model
1 (constant)
C6
b
3.455
.292
Beta
.264
t
Sig.
5.469 .000
3.634 .021
a. Dependent variable: R3
Table 16. Illustrates the model coefficients, respective t
values and their significance (coefficientsa).
the results show that Control 6 has a positive
impact value of R=0.264 and the value of R2
is 0.070. This means that the model (Table 14)
explained 7.0% of the variability of response
Risk 3. Furthermore, Durbin-Watson statistic
(D) is 1.812, and (dU = 1.652, dL = 1.598)
based on K = 1, N = 76, ÔÅ° = 0.05; there is
evidence of no autocorrelation because of the
rule (dU &lt; D &lt; 2 + dL: No autocorrelation).
R4: Risk of 'Insufficient / Inappropriate
Staffing' compared to controls.
Table 17, Table 18, Table 19, and Table 20 show
that the obtained significant values are less than
the selected significant value of ÔÅ° = 0.05, so
there is a positive correlation between Controls
1, 3, 5, 6, 7, 8, 9, 10, 11, 24, 28, and Risk 4, respectively.
In addition, Control 6 has an impact
on Risk 4, and the results show that Control 6
has a positive impact value of R = 0.374 and the
value of R2 is 0.140. This means that the model
(Table 18) explained 14.0% of the variabilC1
.285*
C9
C3
.266*
C10
.276* .309**
C5
C11
.249*
C6
C24
.225*
C7
C8
C28
.263*
.313** .374** .247* .291*
Table 17. Illustrates correlations between respective
controls and R4.
Model
1
R
.374a
R Square
Durbin-Watson
.140
1.745
a. Predictors: (constant), C6
Table 18. Illustrates multiple correlation R,
and R square.
Model
SSquumaroefs df Square
Mean
1 Regression
9.898
1
Residual
Total
60.879 74
70.776 75
9.898
.823
F
Sig.
12.031 .001a
a. Predictors: (constant), C6 b. Dependent variable: R4
Table 19. Illustrates an Analysis of Variance
(ANOVAb).
Unstandardized Standardized
Coefficients Coefficients
Model
1 (constant)
C6
b
2.544
.424
Beta
.374
t
Sig.
4.091 .000
3.634 .001
a . Dependent variable: R4
Table 20. Illustrates the model coefficients, respective t
values and their significance (coefficientsa).
ity of response Risk 4. Furthermore, DurbinWatson
statistic (D) is 1.745, and (dU = 1.652,
dL = 1.598) based on K = 1, N = 76,
ÔÅ° = 0.05; there is evidence of no autocorrelation
because of the rule (dU &lt; D &lt; 2 + dL:
No autocorrelation).
R5: Risk of 'Lack of Senior Management
Commitment and Technical Leadership'
compared to controls.
Table 21, Table 22, Table 23, and Table 24 show
that the obtained significant values are less than
the selected significant value of ÔÅ° = 0.05, so
there is a positive correlation between Controls
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 18, 19,
20, 21, 22, 24, 25, 28, and Risk 5, respectively.
Controls 6 and 16 have an impact on Risk 5.
In addition, the results show that Controls 6, 16
have a positive impact value of 0.433, 0.329 respectively,
multiple correlation is R=0.498 and
value of R2 is 0.248. This means that the model
(Table 22) explained 24.8% of the variability of
response Risk 5. Furthermore, Durbin-Watson
statistic is 2.427, and (dU = 1.680, dL = 1.571)</zone>
  <zone label="GEN_OTHER">132</zone>
  <zone label="BODY_CONTENT">C1
.370**
C6
.433**
C11
.277*
C21
.294*
C2
.272*
C7
.293*
C16
.329**
C22
.243*
C3
.309**
C8
.293*
C18
.254*
C24
.232*
C4
.233*
C9
.308**
C19
.256*
C25
.286*
C5
.390**
C10
.307**
C20
.231*
C28
.283*
Table 21. Illustrates correlations between respective
controls and R5.
Model
1
2
R
.433a
.498b
R Square Durbin-Watson
.187
.248 2.427
a. Predictors: (constant), C6
b. Predictors: (constant), C6, C16
Table 22. Illustrates multiple correlations R,
and R square.
Model
SSquumaroefs df SMqueaarne
F
Sig.
1 Regression 10.799 1 10.799 17.045 .000a
Residual 46.885 74 .634
Total 57.684 75
2 Regression 14.311 2 7.156 12.043 .000b
Residual 43.373 73 .594
Total 57.684 75
a. Predictors: (constant), C6
b. Predictors: (constant), C6, C16
c. Dependent variable: R5
Table 23. Illustrates an Analysis of Variance (ANOVAc).
Model
1 (constant)
C6
2 (constant)
C6
C16
Unstandardized Standardized
Coefficients Coefficients
b Beta
2.410
.443 .443
1.077
.391 .382
.319 .252
Dependent variable: R5
t Sig.
4.415 .000
4.129 .000
1.414 .162
3.683 .000
2.431 .018
Table 24. Illustrates the model coefficients, respective t
values and their significance
(coefficientsa, coefficientsb).</zone>
  <zone label="MET_BIB_INFO">Modelling and Evaluating Software Project Risks with Quantitative Analysis Techniques. . .</zone>
  <zone label="BODY_CONTENT">based on K = 2, N = 76, ÔÅ° = 0.05; there is evidence
of no autocorrelation (dU &lt; D &lt; 2 +dL:
No autocorrelation).
R6: Risk of 'Poor /Inadequate Software
Project Planning and Strategic Thinking'
compared to controls.
Table 25, Table 26, Table 27, and Table 28 show
that the obtained significant values are less than
the selected significant value of ÔÅ° = 0.05, so
there is a positive correlation between Controls
3, 4, 5, 6, 14, and Risk 6, respectively. Controls
5, 14, and 27 have an impact on Risk 6.
In addition, the results show that Controls 5, 14
C3
.267*
C4
.249*
C5
.268*
C6
.228*
C14
.254**
Table 25. Illustrates correlations between respective
controls and R6.
Model
1
2
3
R
.268a
.351b
.423c
R Square Durbin-Watson
.072
.123
.179 2.006
a. Predictors: (constant), C5 b. Predictors: (constant), C5, C14
c. Predictors: (constant), C5, C14, C27
Table 26. Illustrates multiple correlations R,
and R square.
Model
1 Regression
Residual
Total
2 Regression
Residual
Total
3 Regression
Residual
Total
SSquumaroefs df SMqueaarne
F
Sig.
3.170 1 3.170 5.740 .019a
40.869 74 .552
44.039 75
5.411 2 2.705 5.112 .008b
38.629 73 .529
44.039 75
7.884 3 2.628 5.234 .003c
36.155 72 .502
44.039 75
c.aP.rPerdeidcitcotrosr:s:(c(ocnosntsatnatn),t)C,C5,5C14b., CPr2e7dictdo.rsD: e(pceonndsetannttv)a,rCia5b,lCe:14R6
Table 27. Illustrates an Analysis of Variance
(ANOVAd).
Model
1 (constant)
2 (constant)
3 (constant)
C5
C5
C14
C5
C14
C27
b
3.499
.256
2.394
.232
.245
2.715
.292
.377
-.247
Unstandardized Standardized
Coefficients Coefficients
Beta
.268
.243
.227
.306
.350
-.277
t
Sig.
6.352 .000
2.396 .019
3.145 .002
2.201 .031
2.058 .043
3.594 .001
2.750 .008
2.894 .005
-2.219 .030</zone>
  <zone label="MET_BIB_INFO">Modelling and Evaluating Software Project Risks with Quantitative Analysis Techniques. . .</zone>
  <zone label="GEN_OTHER">133</zone>
  <zone label="BODY_CONTENT">Dependent variable: R6
Table 28. Illustrates the model coefficients, respective t
values and their significance (coefficientsa,
coefficientsb, coefficientsc).
have a positive impact value of 0.268 and 0.254,
respectively, multiple correlation is R=0.423
and the value of R2 is 0.179. This means that
the model (Table 26) explained 17.9% of the
variability of response Risk 6. Also, DurbinWatson
statistic (D) is 2.006, and (dU = 1.709,
dL = 1.543) based on K = 3, N = 76,
ÔÅ° = 0.05; there is evidence of no autocorrelation
(dU &lt; D &lt; 2 + dL: No autocorrelation).
R7: Risk of 'Lack of an Effective Software
Project Management Methodology'
compared to controls.
Table 29, Table 30, Table 31, and Table 32 show
that the obtained significant values are less than
the selected significant value of ÔÅ° = 0.05, so
there is a positive correlation between Controls
24, 25 and Risk 7, respectively. In addition,
Control 24 has an impact on Risk 7, and the
results show that Control 24 has a positive impact
value of R=0.394 and the value of R2 is
0.155. This means that the model (Table 30)
explained 15.5% of the variability of response
Risk 7. Furthermore, Durbin-Watson statistic
(D) is 1.933, and (dU = 1.652, dL = 1.598)
based on K = 1, N = 76, ÔÅ° = 0.05; there is
evidence of no autocorrelation because of the
rule (dU &lt; D &lt; 2 + dL: No autocorrelation).
r
R7
C24
.394**
C25
.294*
Model
1
R
.394a
R Square
Durbin-Watson
.155
1.933
a. Predictors: (constant), C24
Table 30. Illustrates multiple correlation R,
and R square.
Model
SSquumaroefs df Square
Mean
F
Sig.
1 Regression
7.387
1
7.387 13.582 .000a
Residual
Total
40.245 74 .544
47.632 75
a. Predictors: (constant), C24 b. Dependent variable: R7
Table 31. Illustrates an Analysis of Variance
(ANOVAb).
Unstandardized Standardized
Coefficients Coefficients
Model
1 (constant)
c24
b
2.327
.469
Beta
.394
t Sig.
3.566 .001
3.685 .000
a. Dependent variable: R7
Table 32. Illustrates the model coefficients, respective t
values and their significance (coefficientsa).
R8: Risk of 'Change in Organizational
Management During the Software Project'
compared to Controls.
R
R8
C17
.255*
Table 33. Illustrates correlations between respective
controls and R8.
R Square Durbin-Watson
Model
1
2
3
4
R
.255a
.374b
.444c
.496d
.065
.140
.197
.246
Table 29. Illustrates correlations between respective
controls and R7.
Table 34. Illustrates multiple correlations R,
and R square.
1.883
a. Predictors: (constant), C17 b. Predictors: (constant), C17, C27
c. Predictors: (constant), C17, C27, C25
d. Predictors: (constant), C17, C27, C25, C6
SSquumaroefs df Square
Mean
F
Sig.
1 Regression
3.760
3.760 5.165 .026a
2 Regression
8.075
4.037 5.947 .004b
1
2
53.872 74 .728
57.632 75
49.557 73 .679
57.632 75
3 Regression 11.368 3
Residual 46.263 72 .643
Total 57.632 75
4 Regression 14.198 4
Residual 43.433 71 .612
Total 57.632 75
3.789 5.898 .001c
3.550 5.803 .000d
a. Predictors: (constant), C17
b. Predictors: (constant), C17, C27
c. Predictors: (constant), C17, C27, C25
d. Predictors: (constant), C17, C27, C25, C6
e. Dependent variable: R8
Table 35. Illustrates an Analysis of Variance (ANOVAe).
Unstandardized Standardized
Coefficients Coefficients
b
3.269
.282
4.268
.389
-.295
3.457
.344
-.397
.306
2.723
.320
-.441
.287
.236
Beta
.255
.352
-.290
.311
-.391
.268
.290
-.434
.251
.230
t
Sig.
5.093 .000
2.273 .026
5.802 .000
3.060 .003
-2.521 .014
4.320 .000
2.741 .008
-3.243 .002
2.264 .027
3.196 .002
2.608 .011
-3.637 .001
2.166 .034
2.151 .035</zone>
  <zone label="GEN_OTHER">134</zone>
  <zone label="MET_BIB_INFO">Modelling and Evaluating Software Project Risks with Quantitative Analysis Techniques. . .</zone>
  <zone label="BODY_CONTENT">Model
Residual
Total
Residual
Total
Model
1 (constant)
C17
2 (constant)
C17
C27
3 (constant)
C17
4 (constant)
C17
C27
C27
C25
C25
C6
the selected significant value of ÔÅ° = 0.05, so
there is a positive correlation between Control
17 and Risk 8. In addition, Controls 6, 17, 25,
and 27 have an impact on Risk 8, multiple correlation
value R=0.496, and the value of R2 is
0.246. This means that the model (Table 34)
explained 24.6% of the variability of response
Risk 8. Furthermore, Durbin-Watson statistic
(D) is 1.883, and (dU = 1.543, dL = 1.709)
based on K = 4, N = 76, ÔÅ° = 0.05; there is evidence
of no autocorrelation (dU &lt; D &lt; 2 +dL:
No autocorrelation).
R9: Risk of 'Ineffective Communication Software
Project System' compared to Controls.
Table 37, Table 38, Table 39, and Table 40 show
that the obtained significant values are less than
the selected significant value of ÔÅ° = 0.05, so
there is a positive correlation between Controls
24, 27, 25, 5, and Risk 9. Controls 24, 27,
25, and 5 have an impact on the Risk 9. In
addition, multiple correlation value R=0.500,
and the value of R2 is 0.250. This means
that the model (Table 38) explained 25.0% of
the variability of response Risk 9. Furthermore,
Durbin-Watson statistic (D) is 1.687, and
(dU = 1.739, dL = 1.515) based on K = 4,
N = 76, ÔÅ° = 0.05; there is evidence of inconclusive
(dL &lt; D &lt; dU: Inconclusive).
C26
.233*
1.687
Dependent variable: R8
Table 36. Illustrates the model coefficients, respective t
values and their significance (coefficientsa,
coefficientsb, coefficientsc, coefficientsd).
Table 33, Table 34, Table 35, and Table 36 show
that the obtained significant values are less than
a. Predictors: (constant), C24 b. Predictors: (constant), C24, C27
c. Predictors: (constant), C24, C27, C25
d. Predictors: (constant), C24, C27, C25, C5
Table 38. Illustrates multiple correlations R,
and R square.
R
R9
Model
1
2
3
4
R
.272a
.387b
.448c
.500d
C24
.272*
.074
.150
.201
.250
Table 37. Illustrates correlations between respective
controls and R9.
R Square Durbin-Watson</zone>
  <zone label="MET_BIB_INFO">Modelling and Evaluating Software Project Risks with Quantitative Analysis Techniques. . .</zone>
  <zone label="BODY_CONTENT">SSquumaroefs df Square
Mean
F
Sig.
1 Regression
3.819
1 3.819 5.892 .018a
2 Regression
7.772
2 3.886 6.445 .003b
3 Regression 10.402 3
3.467 6.032 .001c
4 Regression 12.951 4
3.238 5.919 .000d
47.970 74 .648
51.789 75
44.017 73 .603
51.789 75
41.378 72 .575
51.789 75
38.838 71 .547
51.789 75
a. Predictors: (constant), C24 b. Predictors: (constant), C24, C27
c. Predictors: (constant), C24, C27, C25
d. Predictors: (constant), C24, C27, C25, C5 e. Dependent variable: R9
Table 39. Illustrates an Analysis of Variance (ANOVAe).
Unstandardized Standardized
Coefficients Coefficients
Model
Residual
Total
Residual
Total
Residual
Total
Residual
Total
Model
1 (constant)
2 (constant)
3 (constant)
4 (constant)
C24
C24
C27
C24
C27
C25
C24
C27
C25
C5
Dependent variable: R9
Table 40. Illustrates the model coefficients, respective t
values and their significance (coefficientsa,
coefficientsb, coefficientsc, coefficientsd).
R10: Risk of 'Absence of Historical Data
(Templates)' compared to Controls.
Table 41, Table 42, Table 43, and Table 44 show
that the obtained significant values are less than
the selected significant value of ÔÅ° = 0.05, so
b
3.233
.338
4.090
.461
-.283
3.560
.360
-.365
.285
2.762
.275
-.428
.341
.249
Beta
.272
.371
-.293
.289
-.378
.263
.221
-.444
.315
.241
t
Sig.
4.539 .000
2.427 .018
5.353 .000
3.233 .002
-2.560 .013
4.530 .000
2.448 .017
-3.186 .002
2.139 .036
3.245 .002
1.853 .068
-3.708 .000
2.571 .012
2.159 .034</zone>
  <zone label="GEN_OTHER">135</zone>
  <zone label="BODY_CONTENT">C6
.331**
.312**
C1
C7
.370**
C3
.354**
C8
.253*
C4
.379**
C10
.234*
C5
.349**
C29
.256*
Table 41. Illustrates correlations between respective
controls and R10.
Model
1
R
.379a
R Square
Durbin-Watson
.143
1.882
a. Predictors: (constant), C4
Table 42. Illustrates multiple correlations R,
and R square.
Model
SSquumaroefs df Square
Mean
F
Sig.
1 Regression
6.983
1
6.983 12.391 .001a
Residual
Total
41.702 74 .564
48.684 75
a. Predictors: (constant), C4 b. Dependent variable: R10
Table 43. Illustrates an Analysis of Variance
(ANOVAb).
Unstandardized Standardized
Coefficients Coefficients
Model
1 (constant)
C4
b
3.023
.370
Beta
.379
t Sig.
5.690 .000
3.520 .001
a. Dependent variable: R10
Table 44. Illustrates the model coefficients, respective t
values and their significance (coefficientsa).
there is a positive correlation between Controls
1, 3, 4, 5, 6, 7, 8, 10, 29 and Risk 10, respectively.
In addition, Control 4 has an impact on
Risk 10, and the results show that Control 4
has a positive impact value R=0.379 and the
value of R2 is 0.143. This means that the model
(Table 42) explained 14.3% of the variability
of response Risk 10. Furthermore, DurbinWatson
statistic (D) is 1.882, and (dU = 1.652,
dL = 1.598) based on K = 1, N = 76,
ÔÅ° = 0.05; there is evidence of no autocorrelation
because of the rule (dU &lt; D &lt; 2 + dL:
No autocorrelation).</zone>
  <zone label="GEN_OTHER">136</zone>
  <zone label="MET_BIB_INFO">Modelling and Evaluating Software Project Risks with Quantitative Analysis Techniques. . .</zone>
  <zone label="BODY_CONTENT">1
2
3
4
5
6
7
8
9
project manager's perspective, whereas all Controls
are used most of the time, and rather often.
This study incorporates risk management approach
and planning software development to
mitigate software project failure by using stepwise
multiple regression technique. These tests
were performed using regression analysis (stepwise
regression), in order to compare the Controls
to each of the risk factors, to determine
and evaluate if they are effective in mitigating
the occurrence of each risk factor, and, finally,
to select the optimal model. Only significant relationships
between risks and controls were reported.
In addition, we determined the positive
correlation between risk factors and risk management
techniques, then measured impact risk
in the software project lifecycle. We used correlation
analysis, regression analysis, models
based on the stepwise selection method (add and
remove), and Durbin-Watson statistic. HowRisk
Management Techniques
C6: Implementing and following a communication
plan, C21: Including formal and periodic Risk assessment.
C6: Implementing and following a communication
plan.
C6: Implementing and following a communication
plan, C16: Implementing/utilizing automated version
Control tools.
C5: Developing and adhering a software project plan,
C14: Reusable database and data mining structures,
C27: Combining internal evaluations by external reviews.
C17: Implement/utilize benchmarking and tools of
technical analysis, C27: Combining internal evaluations
by external reviews, C25: Avoiding having too
many new functions on software projects,
C6: Implementing and following a communication
plan.
C24: Ensuring quality-factor deliverables and task
analysis, C27: Combining internal evaluations by external
reviews, C25: Avoiding having too many new
functions on software projects, C5: Developing and
adhering a software project plan.
C4: Develop prototyping and have the requirements
reviewed by the client.</zone>
  <zone label="BODY_HEADING">5.10. Software Risk Factors Identification
Checklists and Control Factors
(Risk Management Techniques)</zone>
  <zone label="BODY_CONTENT">Table 45 shows risk factors identification checklist
with risk management techniques based on
a questionnaire of experienced software project
managers. We can use the checklist in software
projects to identify and mitigate risk factors on
lifecycle software projects by risk management
techniques.</zone>
  <zone label="BODY_HEADING">6. Conclusions</zone>
  <zone label="BODY_CONTENT">The concern of our paper are the modelling risks
of planning software development. The results
show that all risk planning software projects
were very important, and important in software
No
Software Risk Factors
Low key user involvement.
10
Absence of historical data (templates).
Table 45. Software risk planning development factors were mitigated by risk management techniques.
Insufficient/inappropriate staffing.
Lack of senior management commitment and
technical leadership.
Poor/inadequate software project planning and
strategic thinking.
Change in organizational management during
the software project.
Ineffective communication software project
system.
Unrealistic schedules and budgets.
C1: Using of requirements scrubbing.
Misunderstood/unrealistic scope and objectives
(goals).
C6: Implementing and following a communication
plan.
Lack of an effective software project management
methodology.
C24: Ensuring that quality-factor deliverables and task
analysis.
ever, we reported the control factors in risk
management approach were mitigated on risk
planning software development factors in Table
45. Through the results, we found out that
some controls don't have impact, so the important
controls should be considered by the software
development companies in Palestinian. In
addition, we cannot obtain historical data from
database before using certain techniques. As
future work, we intend to apply these study results
on a real-world software project to verify
the effectiveness of the new techniques and
approach on a software project. We can use
other techniques to manage and mitigate software
project risks, such as neural network, genetic
algorithm, Bayesian statistics, and other
artificial intelligence techniques.</zone>
  <zone label="BODY_HEADING">7. Appendix</zone>
  <zone label="BODY_CONTENT">Appendix illustrates models with
an intercept (from Savin and White)
Durbin-Watson Statistic: 1 Percent Significance Points of dL and dU
and 5 Percent Significance Points of dL and dU.
N Significance dL
dU
dL
dU
dL
dU
3
1
4
2
5
1.448 1.501 1.422 1.529 1.395 1.557
1.598 1.652 1.571 1.680 1.543 1.709</zone>
  <zone label="MET_BIB_INFO">Modelling and Evaluating Software Project Risks with Quantitative Analysis Techniques. . .</zone>
  <zone label="GEN_OTHER">137</zone>
  <zone label="GEN_REFERENCES">[2] P. VASANT, Hybrid Mesh Adaptive Direct Search
Genetic Algorithms and Line Search Approaches
for Fuzzy Optimization Problems in Production
Planning. In Handbook of Optimization Intelligent
Systems Reference Library, 38, I. ZELINKA, V.
SN A¬¥SÀáEL, A. ABRAHAM, EDS., Berlin, Heidelberg:
Springer Berlin Heidelberg, 2013, pp. 779-799.</zone>
  <zone label="MET_BIB_INFO">[3] J. MILER AND J. G O¬¥RSKI, Supporting Team Risk
Management in Software Procurement and Development
Projects. In 4th National Conference on
Software Engineering, 2002, pp. 1-15.</zone>
  <zone label="GEN_REFERENCES">[4] C. R. PANDIAN, Applied software Risk management:
A guide for software project managers. Auerbach
Publications is an imprint of the Taylor &amp; Francis
Group, 2007, pp. 246.</zone>
  <zone label="BODY_CONTENT">[5] J. HOFFER, J. GEORGE AND J. VALACICH, Modern
Systems Analysis and Design, 6th ed. Prentice Hall,
2011, pp. 575.
[6] J. SODHI AND P. SODHI, IT Project Management
Handbook. Management Concepts, 2001, pp. 264.
[7] J. TAYLOR, Managing Information Technology
Projects: Applying Project Management Strategies
to Software, Hardware and Integration Initiatives.
AMACOM c 2004, pp. 274.
[8] B. BOEHM, Value-based software engineering. ACM
SIGSOFT Softw. Eng. Notes, 28(2), pp. 1-12, Mar.
2003.
[9] A. ELZAMLY AND B. HUSSIN, Estimating QualityAffecting
Risks in Software Projects. Int. Manag.
Rev. Am. Sch. Press, 7(2), pp. 66-83, 2011.
[10] K. KHANFAR, A. ELZAMLY, W. AL-AHMAD, E. ELQAWASMEH,
K. ALSAMARA, S. ABULEIL, Managing
Software Project Risks with the Chi-Square Technique.
Int. Manag. Rev., 4(2), pp. 18-29, 2008.
[11] A. ELZAMLY, B. HUSSIN, Managing Software
Project Risks with Proposed Regression Model
Techniques and Effect Size Technique. Int. Rev.
Comput. Softw., 6(2), pp. 250-263, 2011.
[12] A. ELZAMLY, B. HUSSIN, Managing Software
Project Risks (Implementation Phase) with Proposed
Stepwise Regression Analysis Techniques.
Int. J. Inf. Technol., 1(4), pp. 300-312, 2013.
[13] A. ELZAMLY AND B. HUSSIN, Managing Software
Project Risks (Design Phase) with Proposed Fuzzy
Regression Analysis Techniques with Fuzzy Concepts.
Int. Rev. Comput. Softw., 8(11), pp. 26012613,
2013.
[14] A. ELZAMLY, B. HUSSIN, Managing Software
Project Risks (Planning Phase) with Proposed
Fuzzy Regression Analysis Techniques with Fuzzy
Concepts. Int. J. Inf. Comput. Sci., 3(2), pp. 31-40,
2014.
[15] A. ELZAMLY, B. HUSSIN, Identifying and Managing
Software Project Risks with Proposed Fuzzy Regression
Analysis Techniques: Maintenance Phase.
In 2014 Conference on Management and Engineering
(CME2014), 2014(Cme), pp. 1868-1881.
75
75
75
75
K
1%
5 %
K
1 %
5 %
N Significance dL
dU
dL
dU
1.368 1.586 1.340 1.617
1.515 1.739 1.487 1.770</zone>
  <zone label="BODY_HEADING">Acknowledgments</zone>
  <zone label="BODY_CONTENT">This study is supported by Faculty of Information
and Communication Technology, Technical
University of Malaysia Malacca (UTeM),
Malaysia and Al-Aqsa University, Palestine.</zone>
  <zone label="GEN_REFERENCES">References
[1] K. SCHWALBE, Information Technology Project
Management. Sixth. Course Technology, Cengage
Learning, 2010, pp. 490.</zone>
  <zone label="GEN_OTHER">138</zone>
  <zone label="MET_BIB_INFO">Modelling and Evaluating Software Project Risks with Quantitative Analysis Techniques. . .</zone>
  <zone label="GEN_REFERENCES">[16] A. ELZAMLY, B. HUSSIN, Managing Software
Project Risks (Analysis Phase) with Proposed Fuzzy
Regression Analysis Modelling Techniques with
Fuzzy Concepts. J. Comput. Inf. Technol., 22(2),
pp. 131-144, 2014.
[17] A. ELZAMLY, B. HUSSIN, Modelling and mitigating
Software Implementation Project Risks with Proposed
Mining Technique. Inf. Eng., 3, pp. 39-48,
2014.
[18] A. ELZAMLY, Evaluation of Quantitative and Mining
Techniques for Reducing Software Maintenance
Risks. Appl. Math. Sci., 8(111), pp. 5533-5542,
2014.
[19] A. ELZAMLY, B. HUSSIN, Mitigating Software Maintenance
Project Risks with Stepwise Regression
Analysis Techniques. J. Mod. Math. Front., 3(2),
pp. 34-44, 2014.
[20] A. ELZAMLY, B. HUSSIN, A Comparison of Stepwise
And Fuzzy Multiple Regression Analysis Techniques
for Managing Software Project Risks: Analysis
Phase. J. Comput. Sci., 10(10), pp. 1725-1742,
2014.
[21] A. ELZAMLY, B. HUSSIN, A Comparison of Fuzzy
and Stepwise Multiple Regression Analysis Techniques
for Managing Software Project Risks: Implementation
Phase. Int. Manag. Rev., 10(1), pp.
43-54, 2014.
[22] A. ELZAMLY, B. HUSSIN, An Enhancement of
Framework Software Risk Management Methodology
for Successful Software Development. J. Theor.
Appl. Inf. Technol., 62(2), pp. 410-423, 2014.
[23] H. HOODAT, H. RASHIDI, Classification and Analysis
of Risks in Software Engineering. Eng. Technol.,
56(32), pp. 446-452, 2009.
[24] B. BOEHM, Software Risk Management: Principles
and Practices. IEEE Softw., (January), pp. 1-10,
1991.
[25] J. MILER, A Method of Software Project Risk
Identification and Analysis. Gdansk University of
Technology, 2005.
[26] CHAOS, The Standish Group Report. 1995.
[27] T. ADDISON, S. VALLABH, Controlling Software
Project Risks - an Empirical Study of Methods used
by Experienced Project Managers. In Proceedings
of SAICSIT, 2002, pp. 128-140.
[28] T. ADDISON, E-commerce project development
Risks: Evidence from a Delphi survey. Int. J.
Inf. Manage., 23(2003), pp. 25-40, 2003.
[29] D. ALOINI, R. DULMIN, V. MININNO, Risk management
in ERP project introduction: Review of the
literature. Inf. Manag., 44(6), pp. 547-567, Sep.
2007.
[30] W. HAN, S. HUANG, An empirical analysis of Risk
components and performance on software projects.
J. Syst. Softw., 80(1), pp. 42-50, Jan. 2007.
[31] S. HUANG, W. HAN, Exploring the relationship between
software project duration and Risk exposure:
A cluster analysis. Inf. Manag., 45(3), pp. 175-182,
Apr. 2008.
[32] B. ARITUA, N. J. SMITH, D. BOWER, What Risks are
common to or amplified in programmes: Evidence
from UK public sector infrastructure schemes. Int.
J. Proj. Manag., 29(3), pp. 303-312, Apr. 2011.
[33] R. SCHMIDT, K. LYYTINEN, M. KEIL, P. CULE, Identifying
Software Project Risks: An International
Delphi Study. J. Manag. Inf. Syst., 17(4), pp. 5-36,
2001.
[34] M. KEIL, P. CULE, K. LYYTINEN, R. SCHMIDT, A
Framework for Identifying Software Project Risks.
Commun. ACM, 41(11), pp. 76-83, 1998.
[35] R. NAKATSU, C. IACOVOU, A comparative study
of important Risk factors involved in offshore
and domestic outsourcing of software development
projects: A two-panel Delphi study. Inf. Manag.,
46(1), pp. 57-68, Jan. 2009.
[36] J. CHEN, S. HUANG, An empirical analysis of the
impact of software development problem factors on
software maintainability. J. Syst. Softw., 82(6), pp.
981-992, Jun. 2009.
[37] M. KEIL, A. TIWANA, A. BUSH, Reconciling user
and project manager perceptions of IT project Risk:
A Delphi study. Inf. Syst. J., 12(2), pp. 103-119,
2002.
[38] L. WALLACE, M. KEIL, A. RAI, How Software
Project Risk Affects Project Performance: An
Investigation of the Dimensions of Risk and an
Exploratory Model. Decis. Sci., 35(2), 2004.
[39] M. SUMNER, Risk factors in enterprise-wide/ERP
projects. J. Inf. Technol., 15(4), pp. 317-327, Dec.
2000.
[40] B. BOEHM, R. ROSS, Theory-W Software Project
Management: Principles and Examples. IEEE
Trans. Softw. Eng., 15(7), pp. 902-916, 1989.
[41] KWEKU EWUSI-MENSAH, Software Development
Failures: Anatomy of Abandoned Projects. The
MIT Press, p. 276, 2003.
[42] G. PARE¬¥, C. SICOTTE, M. JAANA, D. GIROUARD, Prioritizing
Clinical Information System Project Risk
Factors: A Delphi Study. In Proceedings of the
41st Hawaii International Conference on System
Sciences, pp. 1-10, 2008.
[43] D. HOUSTON, G. MACKULAK, J. COLLOFELLO,
Stochastic simulation of Risk factor potential effects
for software development Risk management.
J. Syst. Softw., 59(3), pp. 247-257, Dec. 2001.
[44] B. LAWRENCE, K. WIEGERS, C. EBERT, The Top
Risks of Requirements Engineering, 2001.
[45] D. SHAFER AND C. OFFICER, Software Risk: Why
must we keep learning from experience? Where
Does Risk Occur in DP Software Development? In
Dynamic Positioning Conference, pp. 1-19, 2004.</zone>
  <zone label="MET_BIB_INFO">Modelling and Evaluating Software Project Risks with Quantitative Analysis Techniques. . .</zone>
  <zone label="GEN_OTHER">139</zone>
  <zone label="GEN_REFERENCES">[46] C. JONES, G. GLEN, G. ANNA, D. MILLER, Strategies
for improving systems development project success.
Issues Inf. Syst., XI(1), pp. 164-173, 2010.
[47] C. JONES, Applied Software Measurement Global
Analysis of Productivity and Quality, Third. No.
Third Edition. McGraw-Hill Companies, 2008, p.
662.
[48] A.-N. TAIMOUR, Why IT Projects Fail, 2005.
[49] C. MARTIN, J. PASQUIER, C. M., A. T., Software
Development Effort Estimation Using Fuzzy Logic:
A Case Study. In Proceedings of the Sixth Mexican
International Conference on Computer Science
(ENC'05), pp. 113-120, 2005.
[50] X. JIN, X. XU, Remote sensing of leaf water content
for winter wheat using grey relational analysis
(GRA), stepwise regression method (SRM)
and partial least squares (PLS). In First International
Conference on Agro-Geoinformatics (AgroGeoinformatics),
pp. 1-5, 2012.
[51] Y. LAN, S. GUO, Multiple Stepwise Regression
Analysis on Knowledge Evaluation. In International
Conference on Management of E-Commerce
and E-Government, pp. 297-302, 2008.
[52] N. ZHOU, J. PIERRE, D. TRUDNOWSKI, A Stepwise
Regression Method for Estimating Dominant Electromechanical
Modes. IEEE Trans. Power Syst.,
27(2), pp. 1051-1059, 2012.</zone>
  <zone label="BODY_CONTENT">Received: August, 2014
Revised: October, 2014
Accepted: November, 2014
Contact addresses:
Abdelrafe Elzamly
Department of Computer Science
Faculty of Applied Sciences
Al-Aqsa University P.O.BOX: 4051
Gaza
Palestine
e-mail: abd elzamly@yahoo.com
Burairah Hussin
Fakulti Maklumat &amp; Komunikasi
Universiti Teknikal Malaysia Melaka
Locked Bag 1752, Durian Tunggal
P.O.BOX: 76109 Durian Tunggal
Melaka Malaysia
e-mail: burairah@utem.edu.my
ABDELRAFE ELZAMLY is currently a Ph.D. student of Information
and Communication Technology at the Technical University Malaysia
Malaka (UTeM). Born on November 30, 1976 in Gaza, Palestine, he
received his B.Sc. degree in 1999 from AI-Aqsa University, Gaza and
his Master degree in Computer Information Systems in 2006 from the
University of Banking and Financial Sciences. Since 1999 he has been
working as a full time lecturer of Computer Science at AI-Aqsa University.
Also, from 1999 to 2007 he worked as a part time lecturer at
the Islamic University in Gaza. Between 2010 and 2012 he worked as
a Manager in the Mustafa Center for Studies and Scientific Research in
Gaza. His research interests are in Risk management, quality software,
software engineering and data mining.
BURAIRAH HUSSIN received his Ph.D. degree in Management ScienceCondition
Monitoring Modelling, from the University of Salford,UK in
2007. Before that, he received a M.Sc. degree in Numerical Analysis
and Programming from the University of Dundee, UK in 1998 and a
B.Sc. degree in Computer Science from the University of Technology
Malaysia in 1996. He currrently works as an Associate Professor at the
Technical University Malaysia Malaka (UTeM). He also worked as the
Deputy Dean (Research and Postgraduate) at the Faculty of Information
and Communiction Technology, Technical University of Malaysia
Malaka (UTeM). His research interests are in data analysis, data mining,
maintenance modelling, artificial intelligence, Risk management,
numerical analysis, and computer network advising and development.</zone>
</document>