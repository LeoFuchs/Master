<document>
  <zone label="MET_ABSTRACT">Robert N. Sulgrove</zone>
  <zone label="MET_TYPE">Scoping S o f t w a r e Projects</zone>
  <zone label="MET_ABSTRACT">The key to risk management is to be as co mplete as possible in id entifying
project risks. This paper di scusses the proj ect-seeping process. which is
being successfully used by software developers at AT&amp;T Global
Info rmation Solutions. Project scoping is a method or process used for
identifying and assessing risks to determine a project's feas ibility. Lists of
requirement categories and risk factors are provided as fa cilitating tools.
Project scoping provides a basis for defining a less risky proj ect and for
redefining or discontinuing projects that are too risky. The project-scoping
process also provides a basis for continuously monitoring risks during
development to detect emerging problems at the earliest possible
moment-while there is still time to take effective corrective action. Thus,
project management can focus on development problems in addition to
tracking schedule compliance. The bottom line is that by implementing
project scoping, management has better control over a project.</zone>
  <zone label="BODY_CONTENT">Introduction
Software projects are complex.
Uncontrollable project variabilities that cause
schedule overruns have plagued software
development for decades. Planning the details
of a project is complicated and difficult ifall
possible project variabilities are to be accounted
for. Risk is a large part of the problem. The
followi ng passage from an IEEE tutorial on
software risk management highlights the
problem:</zone>
  <zone label="MET_ABSTRACT">demand for on-time completion and evershorter
development cycles is requiring that
the project planning and project management
processes be dramatically improved.
All software development projects
have some degree of risk associated with
them. Some of the primary reasons that risks
exist include:
- Inherent productcomplexity,
- Unproved product technologies,
Like many fields in their early - Limited developer expertise, and
stages, the software field has had its share - Project constraints.
ofproject disasters. Most post-mortem Traditionally, risk identification and
examinations ofthese failed software proj­ assessment were informal procedures in
ects indicated that many problems would which developers attempted to think of all
have been avoided or greatly reduced if the difficulties that could arise. The develthere
had been an explicit earlyconcern opers then attempted to accommodate
with identifying and resolving high-risk ele­ these difficulties. Successful project manments.
Frequently, these projects were agement, however, involves managing not
swept along by a tide ofoptimistic enthusi­ only risks but also the project and its
asm duringtheir early phases, which resources. A realized risk can cause a projcaused
managers to miss some clear sig­ ect to overrun its budget or schedule or
nals ofhigh-risk issues that proved to be even fail. Nevertheless,eliminating allrisks
the projects' downfall later,' might notbe possible. It might not be desirWhile
the situation is improving, the able either, because doing so cancompromise</zone>
  <zone label="MET_BIB_INFO">AT&amp;TTECHNICALJOURNAL · JAXl'ARY/FEBRl:ARY1996 35</zone>
  <zone label="BODY_CONTENT">the rationale ior undertaking a project.
Risk management strategy can be divided into APaTn&amp;eTl-1G. IASb-btrheveiaGtlioobnasl, IAncforormnyamtiso,naSnodluTteiromnss
iour steps: business unitofAT&amp;T
- Risk identification and assessment, which identities and IEEE-Institute of Electrical and Electronics
assesses risks as soonas possible to determine a proj­ Engineers
ect's potential problem areas: SEI-Software Engineering Institute
- Risk mitigation , which reduces the likelihood of occurrence
and the impact of each ri sk as much as possible:
- Risk-influenced project plan , which incorporates actions
that address each risk throughout a project; and have adopted it for use on all new proj ects.
- Risk management, which continuously monitors and
reassesses the ri sks throughout a project as more infor­ Overview of Project Scoping
mation abouteach risk becomes available, adjusting the The project-scoping process seeks to establish an
project plan accordingly. acceptable project having an acceptable level of risk to
The key to this strategy is to identify risks as com­ deliver an acceptable product in an acceptable timeframe.
pletely as possible. To this end, a newproject-scoping Project scoping sets product requirements, establishes
process wasdeveloped foruse by AT&amp;T Global both a top-level project interval and cost estimate, and
Information Solutions (AT&amp;T-GIS) software developers. identifies risks to determine the feas ibility of undertaking
TIle word "scoping" is used to convey the breadth-or a project. It is intended to provide the solid foundation
scope-of risks that canarise during a project. needed for the preparation of a realistic project plan,
Project scoping is a method or processused for which in turn improves the likelihood that a project will
identifying and assessingrisks to determinea project's be completed successfully and delivered on schedule.
feasibility. Additionally, project scoping allows for mitiga­ Project scoping does more than just provide a
tion of the risks by providing an extensive list of risk fac­ go/ no-go project indicator. It also identifi es the risks that
tors fo r consideration. impede proj ects. Even when a project must be undertakThe
process is used as a first step in planning a en regardless of its associated risks, project scoping will
project, but it can also be used effectively at other times identify the risks and lead to a more effectively planned
throughout a project. Projectscoping is relatively easy and managed project. Projectscoping provides the basis
and inexpensive to implement, and it can be adapted to for continuously monitoring risks duringdevelopment to
work on other types of projects besides software devel­ detect emerging problems at the earliest possible
opment. moment-while there is stilltimeto take effective corThe
project-seeping process wasadopted in rective action.
stages by software developers at AT&amp;T-GIS. Developers Project scoping begins oncean initial set of
firsttried the assessmenton past projects. They learned requirements is established. It is an interactive,structhat
the total numberofhigh and moderate risks did tured, and collaborative effort involving product developindeed
match their experience with problems encountered ment, marketing, distribution, support, and other organiduringa
project. This realization led developers to try the zations. The project-scoping process consistsofthe
process on current projects that werestillin the early following steps, which are described in detail in the next
stages of development. Project-scoping users quickly dis­ three sections:
covered that several significant risks had been overlooked. - Identifying and assessing product requirements risks,
TIley also foun d that several project requirements needed - Formulating a top-level estimate, and
fu rther refinement. - Identifying and assessingproject risks.
The AT&amp;T-GIS software developers determined After these project-seeping steps are completed,
that the project-seeping process wasa goodvalue based the issues of the significance of the risks and their projecton
these initial trials. Atthis point, they tuned the process ed impact on the development effort are addressed. The
to fit their specific organizational and product needs and resulting outputs are repeatedly evaluated togetheruntil</zone>
  <zone label="MET_BIB_INFO">36 AT&amp;TTECHi\ICAl JOUR;'AI. ' JA.'\l'ARY/FEBRUARY 1996</zone>
  <zone label="BODY_CONTENT">Panel 2. Product Requirements Categories</zone>
  <zone label="BODY_HEADING">Functional Definition Requirements
- Transactions
Data storage
Distribution</zone>
  <zone label="BODY_CONTENT">Telecommunications
- Rate
-Distance
-Volume
- Protocol
Network
Devices and media
Compatibility
Backup
Restore
Recovery
Displays
-Size
-Resolution
-Forrnats
Foreign languages
Maintenance
Security
Transaction logs</zone>
  <zone label="BODY_HEADING">Technology Requirements
- Platform(s)
Hardware
Communications</zone>
  <zone label="BODY_CONTENT">Interfaces
End-users
Service users
Support users
Interdependencies with other products,
devices, protocols, telecommunications
Performance Requirements
- Throughput rates
- Response rates
- Continuous operation
- User maintenance-cycle frequency
- Data transmission capacity
- File capacity
- Degraded-mode performance</zone>
  <zone label="BODY_HEADING">Market Requirements
- Market window ofopportunity
- Geographic and vocational markets
- Expected competitio n
Regulatory Requirements
- Certification
Privacy and security laws
Warranty</zone>
  <zone label="BODY_CONTENT">Safety
Environment
Pending legislation
Import/ export regulations</zone>
  <zone label="BODY_HEADING">Quality Requirements</zone>
  <zone label="BODY_CONTENT">- Definition ofall failure events
Consequence of each failure .
Definition of degraded-mode operation
Reliability
Availability
Serviceability
Diagnostics
Method oftransmitting failure data to developer
for review
Method oftransmitting corrections to customer
quickly
Failure work-arounds
Failure predictor alerts; for example,outof
cash
Customer reliability objectives; willingness
to pay for more
Usability
Installability
Defects
Unusual environment operating conditions</zone>
  <zone label="MET_ABSTRACT">AT&amp;TTECHNICALJOURNAL . JAJ\UARY/ FEBRl:ARY 1996 37</zone>
  <zone label="BODY_CONTENT">the fo llowi ng questions are resolved:
- Tot-lctel project estimate:Are the estimated delivery
date and effo rt within acceptable li mits?
- Product requirements: Do the product requirements
continue to define a marketable product?
- Product requirements risks:Are the product requirements
risks acceptably low?
- Developmentrisks:Are the development risks acceptably
low?
TIle project-seeping process can be either easy
or difficult depending on how many iterations andcompromises
are required. The resulting outputs ofthe
process are then used to prepare a detailed project plan.
Identifying and Assessing Risks
Project scoping beginswith a set ofproduct
requirements or a statement ofproduct opportunity. This
inputcan be in the form of a full product requirements
document, a listof enhancementsandchanges to an
existing product, or a prototype. The requirementscan
include almost anything that provides insight into the
product being proposed for development, such as the following
components:
- Function,
- Technology,
- Interface,
- Performance,
- Schedule,
- Cost,
- Regulations,
- Quality,
- Support,
- Introduction date, and
- Support requirements.
Using a checklist is a good approach for identifying
product requirements. Achecklist helpsto ensure
that areas ofrequirements are notinadvertently overlooked.
Panel 2 provides a detailed checklistfor establishing
a comprehensive set ofproduct requirements.
This checklist can be tailored to meet individual needs as
determined from previous projects.
Product requirements are continually refined
throughout the project-scoping process until acceptable levels
ofproduct riskare achieved. Ofcourse, it is assumed
that the requirements continue to define a desirable product
Aproduct mustnotbe compromised so much that it</zone>
  <zone label="MET_BIB_INFO">38 AT&amp;T TECH~ICAl JOliRNAl . JA.'l:UAAY/ FEBRUARY1996</zone>
  <zone label="BODY_CONTENT">becomes undesirable or only margi nally desirable.
To begin the product requirement risk assessment.
each individualstatement ofrequirement is categorized
by its degree ofimportance accordingly:
- Critical. which indicates a requirement that is the
essence of the product:
- Important, which indicates a requirement that greatly
enhances the marketability of the product and indicates
that it would be used bv man" customers;
- Desired, which indicates a requirement that enhances
the product and improves its marketability but that also
can be deferred to a later release; and
- Nice to have, which indicates a requirement that could
be dropped, if necessary.
Each individual product requirement statement is
assessed against the eight ri sk factors shown in Panel 3.
A risk level is identified for each factor. The lowest possible
risk level is zero, and higher risks are indicated by
larger numbers. The eight risk-level numbers are added
together to determine a total risk indicator value for each
single product requirement The requirements are then
ranked according to their total risk number.
All high-risk requirements should be reviewed
individually and verycarefully because anyoneofthem
can seriously impede or even cause the cancellation ofa
project It may be that a high-risk requirement canbe
reworked to reduce its risk level or that the requirement
canbe deferred to a later product release. '{be degreeof
importance ofan individual requirementhelps to ascertain
whether or not it mustbe included in the initial product
release. Undoubtedly, the project team will have to address
all the critical requirements regardless ofthe risk level.
Additionally, high-risk product requirements are
compared to past projects having a similar numberof
high-risk requirements. This comparison provides the
organization with an indication ofa project's feasibility.
When more high-risk product requirements existthan an
organization has everbefore successfully handled, management
should be very concerned aboutthe organization'sability
to complete the newproject successfully and
without significant difficulty.
Formulating a Top-Level Estimate
Acalculation of the cost and time (duration or
interval) necessary to complete a project is referred to as
a top-levelestimate. Costs include those for personnel and
other necessities. such as labo ratory faciliti es and overhead.
as well as purchased software. hardware. or services.
TIle top-level estimate is an ini tial approximat ion
used to indicate whether a project will meet its market
window and how much it will cost.
TIle first step in preparing a top-level estimate is
determining the size of the software product to be developed.
All project models require a sizeestimate of some
type. TIle estimated product size is the key to preparing a
valid top-level estimate. Inaccurate size estimates can be
the most significant source of error in the entire projectscoping
process. Consequently, product size estimation
should be given careful attention.
Estimating the size of a software product is typically
complex regardless of the units of measure usedfor
example, lines of code or number of function points.
The following common size estimation techniques are discussed
elsewhere in full details:
- Expertjudgment; the opinion of a very well qualified
individual.
- Analogy; a comparison of a new product withsimilar
existing products for which sizes are known.
- Delphi;a procedure by which estimates of multiple qualified
people are refined until a group consensus emerges.
Severalvariations of this technique can be used to
accommodate different situations and levels offormality.
No singletechnique is better than any other. Its
value should be determined by the "goodness" of the estimates
obtained. Whatworks well in one situation might
not workso well in another.
A reasonable approach is to have experienced
developers prepare initial size estimates based on past
project data.An advantage of having such multiple and
independent estimatesis that the variability of the estimates
provides an indication of the uncertainty and risk.
After estimating a product's size, a top-level project
estimate can be developed. The top-level estimate can
be completed by implementing one of the three size estimation
techniques mentioned earlier or by using a parametric
modef3. The most reliable method is the parametric
model, which is sometimes called a macro cost estimation
model. TIle primary advantage of the parametric model is
that it is derived from past project data.
Identify ing and Assessing Project Risks
Many factors affect a software development pro]ect,
and am' one oi them can lead to signiti cant cost and
schedule overruns. TIle variability oi these factors represents
a project's uncertainties and influences the cost
and time estimates.
TIle list of factors involved in identifying and
assessing risk. shownin Panels 4 through 8. were derived
from an analysis of past projects at AT&amp;T-G IS and from
the IEEEStandard for Software Productivity Metrics',
This initial project risk assessment provides an
early indication of possiblesignificant risks. A more
detailed assessment should be made later when the project
plan is prepared.
Agroup of experienced software developers
should review all the risk factors shown in Panels 4
through 8 to identify the risk level associated with each
factor. During such a review, the statement and risk factors
that mostclosely match the current situation should
be chosen.
As before, the lowest possible risk level is zero,
and higher risks are indicated by larger numbers.
Factors categorized as Level 3 pose the highest risk.
Level-3 risks are most likely to cause problems during a
project Thus, ways to reduce them to Level 2 or lower
should be explored- ways such as redefining the product,
modifying requirements, or improving the work
environment by introducing better software, hardware,
or processes. .
Factors categorized as Level 2 pose a moderate
risk. These risks sometimes cause significant problems,
but not always. Some effort to mitigate Level-2 risks is
recommended because several moderate risks can prove
to be just as damaging as a single high-level risk.
Factorscategorized as Levell pose a mild risk.
These risks rarelycause problems but they should still
be reduced, if possible.
Factors categorized as Level 0 pose virtually no
risk and should not cause any problems.
When high and moderate risksexceed the maximum
number that an organization cansuccessfully handle,
the proposed project could encounter major problems.
Conclusion
The project-seeping process was developed to
provid e a methodical approach for comprehensively
identifying and assessing project risks. Its twofold objective
is to ensure that all possible product and project</zone>
  <zone label="MET_ABSTRACT">AT&amp;TTECHNICALJOUR.'lAL ' JA.'~lIARY/FEBRUARY 1996 39</zone>
  <zone label="BODY_CONTENT">Panel 3. Product Requirements Risk Assessment
Successful prod uct development is dependent on
a dear and concise set of requirements. Each
requirement is assessed for eight factors. TIle
first SLX factors represent the characteristics
of a good requirements statement identified in
the IEEE Guide to Software Requirements
Specifications». Two new facto rs used to evaluate
complexity and susceptibility to change
are added. 0 = no risk; 1 = some risk; 2 = moderate
risk; 3 = highest risk.
-Requirement ambiguity risk
o 0 Unambiguous. The requirement has
only one interpretation.
o 1 Ambiguous. The requirement can be
interpreted in more than one way.
-Requirement completeness risk
o 0 All expected and unexpected responses
to a user input are defined.
o 1 Either not allpossibilities are covered
or they are yet to be determined.
-Requirement verifiability risk
o 0 Verifiable. It is possible to verify fulfillment
of the requirement
o 1 Unverifiable. It is not possible to verify
fulfillment ofthe requirement
-Requirement consistency risk
o 0 Consistent The requirement is consistent
with allother requirements.
D 1 Inconsistent The requirement is in
conflict with some other requirement
- Requirement modifiabilityrisk
o xlodifiable. TIle requirement can be
changed easily. completely. and consistently.
LJ Unmodifiable. TIle requirement cannotbe
changed easily. completely, or
consistently.
-Requirement traceability risk
C 0 Traceable. The origin of the requirement
is clear and the forward referencing
is unique.
D 1 Untraceable. Either the forward or
backward traceability is notclear.
-Product complexity risk
Howwell known is the product technology to
support this requirement?
D 0 Very familiar and low-risk technology.
o 1 Familiar technology, but difficult
o 2 Prototyped/demonstrated new technology.
o 3 New, neverbefore demonstrated technology.
-Requirement changeability risk
How susceptible is the requirement to change?
D O Well known andstable.
D 1 Several alternatives are feasible.
D 2 New requirement; alternatives might
not be known.
D 3 Marketplace is in a state ofchange,
risks are identified and that the effects ofsuch risks on a
project are recognized.
To date, experience with the project-seeping
process at AT&amp;T-GIS has been successful and wellworth
the effort Software developers have noted the following
significant benefits:
- Helps to ensure that the requirements are well stated
and well understood.
- Provides an assurance that risks will be noticed.
- Helps to set an upper limit on the amount of risk that
can be successfully managed.
- Requires minimal time to perform. The process typically
takes from one day forsmall projects involving several
individuals to a week or more for larger projects
involving 25 or more people. TIle developers believe
this is not extra time spentbut time theywould have to
spendanyway addressing risks.
- Provides a basisfor team building among developers
and the other groupswith which developers interact
(for example, marketing, support, distribution, and so
forth). The risks highlighted during such interaction
and discussion provide a focus for team effort
Software developers have used project scoping
primarily to ensure that a proposed project is sufficiently
well defined and understood before detailed planning
takes place. This means that the detailed planning of
some projects is deferr ed until their requirementsare
better defined. Additionally, the process has been used
on projects already under way to determine if modifications
are necessary.</zone>
  <zone label="MET_BIB_INFO">40 AT&amp;TTECHNICAL JOURNAL . JANl:ARY/FEBRUARY\996</zone>
  <zone label="GEN_OTHER">..</zone>
  <zone label="BODY_CONTENT">Panel 4. Organizational Risk Factors
Coordination is necessary amo ng the people
and organizations involved on a project. :\11
functional areas (fo r example. marketing.
customer services. distribution. publications.
and so forth) that an.' involved in the
project are considered.0 = no risk: 3 =highest
risk.
- Interactions between organizations
Interactions between people and projects in
other organizations add to project complexity
due to additional coordination and communication
requirements. These interactions
include both internal organizations
and external companies.
o 0 Single organization.
o 1 Multiple organizations, but no interactions
required.
o 2 Multiple internal organizations
requiring moderate interaction.
o 3 Multiple internalorganizations
and/or external companies
involved, or extensive involvement
required.
-Resource availability, scheduling, and
coordination
All non personnel resources must be available to
those personnel needing them. Delayed
availability, periods ofunavailability for any
reason, and overloaded resourcescan result
in significant project delays. The timely
availability ofthe needed resources mustbe
reviewed against the needs for the same
resourceon some other project within the
organization.
o 0 Adequate dedicated resources
always available.
o 1 Dedicated resources always available,
but quantity is limited.
o 2 Occasional contention for shared
resources.
o 3 Frequent contention for shared
resources.
-Personnel selection, scheduling, assignment,
coordination, and continuity
The timelyavailability ofthe personnel having
the expertise and experience needed must
be reviewed against the needs for the same
people or person on some other project
within the organization. Continuity (low rate
ofturnover and reassignment) ofthe personnel
anticipated for assignment to the project
is critical.
C 0 Sufficient expert personnelare readilv
available,
o Sufficient experienced personnel are
usually available.
o 2 Experienced personnel must be
shared.
o 3 No experienced personnel are available.
- Software process maturity
Project successis related to the maturity of the
organization's development processesf A
Capability Maturity Model, such as the one
developed by the Software Engineering
Institute (SEO and described elsewhere'',
should be used as the basis for assessment
Note that both SEI Capability Maturity Levels
4 and 5 are both rated at risk level O.
o 0 SEI Capability Maturity Level 5Optimized.
A high degree ofcontrol
over the development process has
been achieved. Process dataare used
in an iterative manner to improve the
process and achieveoptimum performance.
o 0 SEI Capability Maturity Level 4Managed.
The process is understood,
quantified, measured, and reasonably
wellcontrolled. Tools are used to controland
manage the development
process.
o SEI Capability Maturity Level 3-Defined.
The process is well defined
in terms of software engineering standards
and methods. Organizational
and methodological improvements
have already been made.
o 2 SEI Capability Maturity Level 2Repeatable.
Project cost and schedule
management is now used successfully.
Standard methods and practices
are used for managing software development
activities.
o 3 SEI Capability Maturity Level 1Initial.
Development processes and
modern software engineering management
practices and tools are inconsistently
applied.</zone>
  <zone label="MET_BIB_INFO">AT&amp;TITCII:&gt;:ICAL JOUR.'1AL ' JA.\UARY/FEBRUARY1996 ~1</zone>
  <zone label="BODY_CONTENT">Panel 5. Development Environment Risk Factors
TIle development environment, testing environment,
languages, and tools used by developers-and
the stability ofeach- are important
factors that infl uence the success ofa project
o= no risk; 3 = highest risk.
-Software development environment
TIle common development virtual machine, individual
workstations, tools, and the communications
between them comprise a software
development environment TIle number,
sophistication, cohesiveness, and integration
ofthe tools make for a better environment
D 0 Each developer has an intelligent
workstation, which is connected electronically
to a common host development
system. Integrated software
development packages are used exclusively.
D 1 Each developer has an intelligent
workstation, which is connected electronically
to a common host developmentsystem.
Many tools are used,
but they are not integrated.
D 2 No electronic connection exists
between the developers or the tools
used.
D 3 Shared workstations and an adhoc
collection of tools characterize this
environment
-Product testing environment
The complexity of the environment that must be
usedfortestinga product can pose a significantrisk.
D 0
Target testingenvironment is available
and integrated with the development
environment
Good target processors are available,
but they are not integrated with the
development environment
Poortarget processor environment is
D
D
1
2</zone>
  <zone label="MET_BIB_INFO">~2 AT&amp;TTI CHNICALJOURNAL ' JANUARY/ FEBRUARY \996</zone>
  <zone label="BODY_CONTENT">available, but it is not integrated with
the development environment,
C 3 Target processor environment is not
available.
- Languages and tools environment
The tools used are assessed fortheir power,
sophistication, quality, and degree ofintegration
with other tools.
o 0 Very easy and instinctive to use tool,
powerful, and integrated with other
tools.
D Many stand-alone commercial tools
are used.
o 2 Ad hoc, unsupported, and undocumented
tools are used.
Few or no tools are used.
D 3
-Stability risk
The stability ofanyaspectof the environment on
which the developers work can pose a significant
risk. How stable or volatile is the development
environment?
D O No recent changes and noneplanned
(very stable) .
o 1 Only infrequent and planned changes.
D 2 More frequent and impromptu
changes.
o 3 Unplanned changes occurconstantly
(very volatile).
-Developer experience risk
Lack of developer experience with the developmentenvironment,
test environment, and
tools can pose a significant risk. How experienced
are the developers with the individual
factor being assessed?
D 0 Extensive experience, proven track
record.
D 1 Limited experience.
D 2 Familiar with, but never used.
D 3 No familiarity or experience.
Panel 6. Product Complexity and Technology
Risk Factors
Product complexity risks can be quite fo rmidable.
TIle inherent complexity of anypart ofa
product is a significant risk in itself. In addition
to the factors listed. all moderately complex
product components should be assessed
individually. 0 = no risk: 3 = highest risk.
-Target virtual machine
Software is developed fo r whatis called the target
virtual machine, which includes all hardware,
firmware, software, communication.
and devices that comprise the total system.
How complex is the targetvirtual machine?
o 0 Very simple and well known target
system.
o 1 Relatively simple target system, but
not well known.
o 2 Moderately complex target system.
o 3 Very intricate target system.
-Software produ ct type
The typeofproducttobe developed anditsinherent
complexitycanpose a risk to the project
Howcomplexis the product to be developed?
o 0 Very simple andwellknown product
(for example, an incremental release) .
o 1 Relatively simple product, but not
well known.
o 2 Moderately complex product
o 3 Very intricate algorithms and processing
requirements.
-EJcternal software intenaces
Software with which the product must interact
can dramatically affect the complexity ofthe
product being developed and its testing. How
complex are the external software interfaces?
D O No interfaces.
o 1 Relatively simple interfaces.
o 2 Moderately complex interfaces.
o 3 Many intricate interfaces.
Technological advances are constantly occurring.
Adoption ofthe latest technologies
results in a product having a goodcompetitive
advantage, although there are risks associated
with new technologies. Alist of all the
product's technologies should be prepared
and assessed individually. Possibly overlapping
technologies are not a concern. One
should be concerned, however, with ensuring
that all technologies, especially newones,
are listed.
- Technology experience
How mature is the technology beingassessed?
o 0 The organization has extensive development
experience with this technology.
o 1 The organization has limited development
experience with this technology.
o 2 Development experience with this
technologyexists outside the organization,
but none inside.
o 3 No development experiencewith this
technology exists anywhere.</zone>
  <zone label="MET_BIB_INFO">AT &amp;T TECHNICAL JOUR;-:AL . JANUARY/ FEBRUARY 1996 43</zone>
  <zone label="BODY_CONTENT">Panel 7. Product Constraining Risk Factors
These factors address the complexity of a product
affected by product related constraints.
Constraints make it more difficult or even
impossible to produce a product. Each factor
becomes a risk as the parameter approaches
its constraining limit. The product constraining
risks identified in this panel represent
what is known in the industry about the
effects ofcommon factorson a project.All
the constraints are evaluated by the followingcriteria:
o 0 Evidence shows that this constraint
will notbe a problem.
o 1 Indications are that this constraint
should notbe a problem.
o 2 No indication as to whether or not
this constraint will be a problem;
some difficulty could occur.
o 3 Evidence or suspicion that this constraint
will only be satisfied with
extreme difficulty; many iterations
might be required.
-Memory constraints
If a software product uses nearly allavailable
memory, additional processing requirements
must accommodate the situation. The
choices are to increase the memoryavailable,
expend more effortto make it fit, or
subdivide the design intosmaller modules.
-Response time constraints
These constraints are associated with realtime
requirementsand unusually rapid response
requirements. They can be closely intertwined
with other constraints. Tight constraintsfrequently
result in reduced
response time and reduced throughput performan
ce.
-Throughput execution time constraints
Fully used processor capacity results in system
degradation due to larger queues and more
queue handling.
-Data transmission constraints
Fully used datatransmission capacity resultsin
system degradation due to larger queues
and more queue handling.
-Mass storage constraints
When more ofthe available mass storage is
used,additional effort is needed to fit programs
into the limited space.
-Security constraints
This factorcovers tightly controlled security of
outputs, as well as connections to uncontrolled
systems.
-Data synchronization constraints
This condition occurswhen multiple processors
use the same dataelement, which has
multiple states.
-Quality constraints
This factor considers unusual requirements
for an extremely reliable system or unusually
severe consequences for specified failures.
These constraints can be applied to
all quality items, such as availability, serviceability,
usability, installability, maintainability,
and so forth.</zone>
  <zone label="MET_BIB_INFO">44 .~T&amp;T n:CHNICAl JOURNAl ' JANUARY/FEBRUARY19%</zone>
  <zone label="BODY_CONTENT">Panel 8. Project Constraining Risk Factors
These fac tors address the added complexity of
a project constrained by schedule and budget.
Problems arise oni)' when limitations
are severe. 0 = no risk; 3 =highest ti sk.
-Schedule
Excessive compression ofa project schedule
presents problems, including more personnel,
increased communication overhead,
and difficulties in personnel and resource
management The industry has shown that
project schedules cannotbe compressed
beyond a compressibility limit?The desire
to achieve an early marketdate must be
assessed in terms of its effects on developmentactivity.
D 0 Notknown to be a problem.
D 1 Should not be a significant problem.
D 2 Likely to causesomeadditional difficulty.
D 3 Possible only with extreme difficulty;
many iterations mightbe
required.
-Budget
Issuesofbudgetand stafflevels are related and
tend to be inversely related to schedule. A
simple equation does not exist for cost as a
function of the effortand development time.
D 0 Notknown to be a problem.
D 1 Should not be a significant problem.
D 2 Likely to cause someadditional difficulty.
D 3 Possible only with extreme difficulty;
many iterations might be required.</zone>
  <zone label="GEN_REFERENCES">References
1. B. \\". Boehm. 50.111('(/ 1''' Risl: .\lallagclI/cut. IEEE Computer Society
Press. \\"ashington. D.C.. 1989. .
2. J. P. Mart ino. Technological Forecastingfor Dccisionmaking.
American Elsevier Publishing Company. New York City. 1972.
3. S. D. Conte, H. E. Dunsmore. and V. Y. Shen, Software Ellgillcu illg
Metric.' and Models. Benjamin/Cummings Publishing Company.
Menlo Park. California. 1986.
4. IEEE Standard 1045-1992./EEE StandaI'd / 01' Software Productivitv
Metrics.The Institute of Electrical and Electronics Engineers. Inc..
t"ewYork City, 1993.
5. ANSI/I EEE Standard 83().1984, /EEE Guide to Software
Requirement s Specifications,111e Institute of Electrical and
Electronics Engineers, Inc., New York City, 1984.
6. W. S. Humphrey, Mallagillg the Software Process,Addison-Wesley
Publishing Company. Reading. Massachusetts, 1989.
7. L H. Putnam and W. Myers, Measures/orExcellence: Reliable
Software 0 " Time, With ill Budget. Yourdon Press, Englewood
Cliffs. NewJersey, 1992.
(ManuscriptapprovedJalluary1996)
Robert N. Sulgrove is a software process and technology
spe cialist in the Software Technology Cent er at
AT&amp; T Bell Laboratories in Cotumbus, Ohio . When
he developed the project ·scoping process,
Mr. Sulgro ve was a senior software process con su
ltant wit h AT&amp;T Global Information Solution s in
Dayton, Ohio. He has a B.S. degree in mechanical engineering
from the Gen eral Motors Institute in Flint. M ichigan, and
an M.S. in managem ent science from the Univers ity of
Dayton. Mr. Sulgrovejoined AT&amp;T in 1970.</zone>
  <zone label="MET_BIB_INFO">AT&amp;T TECHNICAL JOURNAL • JA:o,;UARY/ FEBRlIARY1996 45</zone>
</document>