<document>
  <zone label="MET_TITLE">We've all heard tales of multimillion dollar mistakes
that somehow ran off course. Are software projects that risky
or do managers need to take a fresh approach when
preparing for such critical expeditions?
A FramEwork 5
IdenTifYingg
SoftwarE ProjEct
i s
R
k</zone>
  <zone label="MET_ABSTRACT">Software projects are notoriously difficult to manage and too many of
them end in failure. In 1995, annual U.S. spending on software projects reached approximately
$250 billion and encompassed an estimated 175,000 projects [6]. Despite the
costs involved, press reports suggest that project failures are occurring with alarming frequency.
In 1995, U.S companies alone spent an estimated $59 billion in cost overruns on
IS projects and another $81 billion on canceled software projects [6]. One explanation for
the high failure rate is that managers are not taking prudent measures to assess and manage
the risks involved in these projects.</zone>
  <zone label="MET_AFFILIATION">Mark Keil, Paul E. Cule, Kalle Lyytinen, and Roy C. Schmidt</zone>
  <zone label="GEN_OTHER">76</zone>
  <zone label="MET_BIB_INFO">November 1998/Vol. 41, No. 11 COMMUNICATIONS OF THE ACM</zone>
  <zone label="BODY_CONTENT">Advocates of software project risk management
claim that by countering these threats to success, the
incidence of failure can be reduced [4, 5]. Before we
can develop meaningful risk management strategies,
however, we must identify these risks. Furthermore,
the relative importance of these risks needs to be
established, along with some
understanding as to why
certain risks are perceived
to be more
important than others.
This is necessary
so that managerial
attention can be
focused on the areas
that constitute the
greatest threats. Finally, identified
risks must be classified in a way that
suggests meaningful risk mitigation strategies.
Here, we report the results of a Delphi study in
which experienced software project managers identified
and ranked the most important risks. The study
led not only to the identification of risk factors and
their relative importance, but also to novel insights
into why project managers might view certain risks
as being more important than others. Based on these
insights, we introduce a framework for classifying
software project risks and discuss appropriate strategies
for managing each type of risk.
Since the 1970s, both academics
and practitioners have written
about risks associated
with managing software
projects [1, 2, 4,
5, 7, 8]. Unfortunately,
much of what
has been written on
risk is based either on
anecdotal evidence or on studies
limited to a narrow portion of the development
process. Moreover, no systematic attempts have been
Rmade to identify software project risks by tapping
IEDthe opinions of those who actually have experience in
E
HNmanaging such projects. With a few exceptions [3,
C
SN8], there has been little attempt to understand the
O
JSArelative importance of various risks or to classify
them in any meaningful
way. Thus, there
is a need for a more
systematic investigation
to identify the
major risks that can
impact software projects, to
classify these risks, and to develop
appropriate strategies for each class of risk.1
In terms of previous efforts to identify risk factors,
Boehm's work [4] has probably had more influence
on the practitioner community than any other.
Boehm's “top 10 list of software risk items” was
built upon his experiences in the defense industry in
the 1980s. The projects and environments that were
the basis of Boehm's work might not, however,
be representative of those in typical business
enterprises. Furthermore, both the
organizational and technological
landscape has changed
considerably since
Boehm's work
a p p e a r e d ;
new organiz
a t i o n a l
forms and
systems development
environments
have emerged, new mechanisms
have evolved for acquiring systems (for
example, outsourcing and strategic alliances), and
the centralized, mainframe-centric, systems architecture
has given way to distributed computing. For all
of these reasons, we judged it to be an appropriate
time to reexamine the risk issue.
Our study was designed
to address two basic
questions: What are the
1In decision theory a risk may lead to either positive or negative consequences.
Although Charette [5] defines software risk along decision-theoretic lines, the bulk of
software risk management literature traditionally has focused on the negative outcomes
[2]. Consistent with the focus on negative outcomes, we define a risk factor as a contingency
that constitutes a serious threat to the successful completion of a software
development project.</zone>
  <zone label="MET_ABSTRACT">COMMUNICATIONS OF THE ACM November 1998/Vol. 41, No. 11</zone>
  <zone label="GEN_OTHER">77</zone>
  <zone label="BODY_HEADING">Lack of top management
commitment to the project
Failure to gain user commitment
Misunderstanding the requirements
Lack of adequate user involvement
Failure to manage end user
expectations
Changing scope/objections
Lack of required knowledge/skills</zone>
  <zone label="BODY_CONTENT">in the project personnel</zone>
  <zone label="BODY_HEADING">Lack of frozen requirements
Introduction of new technology
Insufficient/inappropriate staffing
Conflict between user departments</zone>
  <zone label="BODY_CONTENT">HKG
USA
FIN
1 = less important, 10 = more important
factors that software project managers perceive as
risks and which of these factors do they consider
most important? Can the risk factors be categorized
in such a way as to provide insight into appropriate
risk mitigation strategies?
To address these questions we assembled panels of
countries and cultures, selected a common set of 11
risk factors as being among the more important
items. While there were differences across panels in
the level of importance ascribed to some of these risk
factors, the fact that all three panels independently
selected these 11 risk factors suggests they are, in
0
1
2
3
4
5
6
7
8
9
10
Figure 1. Risk factors identified by all three panels ordered by relative importance
experienced software project managers in different parts
of the world-Finland, Hong Kong, and the U.S.and
asked them to first identify specific risk factors and
then rank and rate them in terms of their importance.2
Two very interesting results emerged from the
study. In terms of identifying and rating risk factors,
there were nearly a dozen factors that all three panels
viewed as important, suggesting the existence of
a universal set of risks with global relevance. Interestingly,
risks that were viewed to be most serious
were often those seen as being outside the direct control
of the project manager. This observation provided
us with a means of categorizing the risk factors
in a useful way. Accordingly, to address the second
question we introduce a framework based on two
dimensions: perceived level of control, and perceived relative
importance of the risk. We then speculate on possible
strategies for managing each type of risk.
Perhaps the most interesting finding is that three
independent panels, representing very different
2We chose an international approach to identify a broader set of risk factors and
explore possible cultural differences relating to the identification and ranking of specific
risk factors. While some differences were observed across the different panels, this
focuses on the factors that were common to all three panels. Readers interested in other
aspects of the study should refer to [12].</zone>
  <zone label="GEN_OTHER">78</zone>
  <zone label="MET_BIB_INFO">November 1998/Vol. 41, No. 11 COMMUNICATIONS OF THE ACM</zone>
  <zone label="BODY_CONTENT">some sense, universal. In experimental terms, each
panel represents a replication of the same Delphi
experiment, adding credibility to our findings.
Figure 1 shows the mean importance rating
ascribed to each of the 11 risk factors for each country
panel. The risk factors are ordered in decreasing
level of importance (averaging across the three panels)
from top to bottom.
Interestingly, only one of the 11 risk factors that
were viewed as important by all three panels
involved technology. This item-the introduction
of new technology-was not rated particularly
high relative to the other items. One reason for
this may be that software project managers feel
they can control the risks posed by new technology.
As one project manager observed: “I expect
that risk assessments concerning the technology
are fully understood, and provided for in the project
plan.”
Throughout the Delphi process, panelists shared
their insights regarding not only which risks are
most important, but why. While space does not permit
a full discussion of each risk factor, we discuss
some of the panelists' explanations for the importance
of the top three risk factors: lack of top management
commitment to the project, failure to gain no control. As one panelist remarked: “The reason I
user commitment, and misunderstanding the ranked customer risk so high is because I cannot
requirements. effectively control user behavior. I cannot tell my customer's
departmental vice presidents to hold hands
A esting to note that our panelists chose The notion of control and its relationship with
lthough the importance of top man- and sing We Are The World, when that is what the
agement support is obvious, it is inter- project desperately needs.”
the term “commitment” (rather than perceived importance enabled the development of a
“support”) to indicate the strong, active role top framework for mapping different types of risk.
management must play in the project from initiation We mapped the different types of risk identified
through implementation. Many panelists saw the by our panelists into a 2 x 2 grid (Figure 2). One
lack of top management commitment as a risk that dimension of the grid is perceived importance,
overshadowed all others. In the words of one panelist, which we define as the relative importance of a par“if
this is not present, then all other risks and issues ticular risk factor in relation to other risk factors.
may be impossible to address in a timely manner.” Importance is some combination of risk frequency
Another prime area of concern to the panelists was (that is, how likely it is that the risk will occur) and
the failure to gain user commitment which was risk impact (such as, how serious a threat the risk
viewed as critical because it helps ensure that users represents if it does occur). The second dimension,
are actively involved in the requirements determina- perceived level of control, represents the
tion process, and it creates a sense of own- degree to which the project managers
ership, thereby minimizing the risk that perceived that their actions could prethe
system will be rejected. To some, vent the risk from occurring. Both
strong user commitment was seen as dimensions are obviously continuums
something that could even compensate which, for the sake of simplicity, have
for a lack of executive commitment. been reduced to a grid.
This remark offered by one of the pan- We first mapped the individual
elists was typical: “The users of the sys- risk factors into the upper or lower
tem to be delivered are the ultimate half of the grid using the average percustomer
of the deliverable . . . If the users ceived importance scores provided by the
are not committed to a joint effort in which panelists.3 As a gauge for assessing the perceived
they are heavily involved in the effort, there is a high level of control over risk factors (whether an item
risk of assuming their detailed functional and busi- should be mapped to the left or right side of the
ness requirements. Without their commitment, they grid), we relied on both the panelists' comments and
withdraw critical feeling of ownership and the pro- our own experience in managing projects. Once the
ject has a high chance of missing the mark. Even factors were mapped in this manner, it was possible
executive commitment lacking can be overcome by to derive the broader category names shown in Figtotal
customer/user commitment.” ure 2. Note that the numbers in the quadrants are for
Misunderstanding the requirements was also reference only, and do not imply any sort of
viewed as a critical risk factor because, in the words of sequence. Rather, the risks in all four quadrants
one panelist, “requirements drive the entire project.” must be actively managed throughout the entire
Without a proper systems analysis to develop a com- project.4 Each of the four quadrants requires a differplete
and accurate set of requirements there is a dis- ent approach toward managing risk.5
tinct possibility of building a system that no one wants Quadrant 1: Customer Mandate. Many of the
to use. For this reason, many panelists underscored the panelists' top risks fall in this quadrant. The name
importance of understanding the requirements. for this quadrant captures the notion that successful
A Risk Categorization Framework 3Risks rated an average of 7 or higher on our 10-point scale were classified as high
One of the more intriguing findings from our study i“mmpoodretraantec”e.wRaisskcshorasteendbbeeclaouwse7alwleorfetjhuedgreemdationbinegofrimskosdwerearteeriamtepdor5taonrche.igThheer.teTrhme
is that risks thought to be most important are often mapping was initially performed with the 11 risk factors common to all three panels.
not under the project manager's direct control. Amdadpipteiodntaol fpaocptourlsatveietwheedqtuoadbreainmtspmorotarnetfublylyonanedortomdoreeteorfmtihneethifretheepafrnaemlsewweorrekthheand
When asked to explain why they perceived certain f4aIcnetevraalcidtiiotyn.s undoubtedly exist across quadrants, but because of space limitations
risk factors to be more important than others, many these will not be discussed here.
panelists indicated their perceptions of risk were a5rTehoeffreirsekdmfoitrigilaltuisotnrasttirvaetepguierspowseesd.iMscourses adraetasoimsenweehdaetdsptoecudleatteirvmeiantethhioswpoeifnfetctainvde
higher for those items over which they had little or these, or other, risk mitigation strategies would be in practice.</zone>
  <zone label="MET_BIB_INFO">COMMUNICATIONS OF THE ACM November 1998/Vol. 41, No. 11</zone>
  <zone label="GEN_OTHER">79</zone>
  <zone label="BODY_CONTENT">projects are very often those that have the commitment
of both senior management and those who will
actually use the system. Without a clear charter, or
mandate, the project is simply not viable. Relevant
questions for project managers to ask are: Does this
project have senior management commitment? Does
it have user commitment? In short, is there a clear
charter or mandate for me to complete the project?
Examples of specific risk factors in this quadrant
include a lack of top management commitment, failure
to gain user commitment, and inadequate user
involvement. All were viewed as critical items over
which the project manager had comparatively little
control.
Quadrant 1 requires risk mitigation strategies
that create and maintain good relationships with
customers and promote customer commitment to
the project. Such relationships cannot be built
overnight. Therefore, to successfully counter Quadrant
1 risks, both IS senior management and project</zone>
  <zone label="BODY_HEADING">High
Perceived
Relative
Importance
of Risk
Moderate</zone>
  <zone label="BODY_CONTENT">1</zone>
  <zone label="BODY_HEADING">Customer
Mandate</zone>
  <zone label="BODY_CONTENT">2</zone>
  <zone label="BODY_HEADING">Scope and
Requirements</zone>
  <zone label="BODY_CONTENT">4</zone>
  <zone label="BODY_HEADING">Environment</zone>
  <zone label="BODY_CONTENT">3</zone>
  <zone label="BODY_HEADING">Execution
Low High
Perceived Level of Control</zone>
  <zone label="BODY_CONTENT">Figure 2. A risk categorization framework
managers must establish and maintain long-term
relationships with both their users/customers and
with company senior management. An essential element
to this relationship building is the project
manager's need to build and maintain trust with the
users by meeting commitments.
Projects in which either top management or user
commitment is lacking represent a high-risk proposition.
But, initial commitment is not enough. Once
a project has started, project managers must periodically
gauge the level of commitment from both top
management and the user community to avoid being
caught in a situation where support for the project
suddenly evaporates.
One approach for establishing and maintaining
commitment within the context of a specific project
is the application of “Theory-W” [3], which involves</zone>
  <zone label="GEN_OTHER">80</zone>
  <zone label="MET_BIB_INFO">November 1998/Vol. 41, No. 11 COMMUNICATIONS OF THE ACM</zone>
  <zone label="BODY_CONTENT">structuring the project to meet the “win” conditions
of various stakeholders. Projects that enjoy broadbased
support across multiple stakeholders are less
risky than those narrowly aimed at gaining the commitment
of just one stakeholder.
Research also suggests a number of other tactics
by which commitment to a project can be fostered
[9], including emphasizing the large payoffs associated
with successfully completing the project, creating
opportunities for senior managers to publicly
display their support for the project, and aligning
the project with other goals that are viewed as central
to the organization.
In addition to the approaches already outlined,
managing the risks associated with Quadrant 1 also
involves managing end-user expectations. Problems
with user acceptance can occur whenever user expectations
are not realistic.
To summarize, the risks in this quadrant cannot
be controlled by the project manager, but they can
be influenced. Project managers must take reasonable
steps to ensure that they have the support and
commitment needed to deliver a successful project
[10]. The risk mitigation for Quadrant 1 involves
relationship management, trust-building, and political
skills. Project managers must have these skills in
order to effectively address the risks in this quadrant.
Quadrant 2: Scope and Requirements. As our
name for this quadrant suggests, many of the risks
threatening software projects involve the ambiguities
and uncertainties that arise in establishing the
project's scope and requirements. Relevant questions
for project managers to ask are: What is inside the
scope of the project and what is outside the scope of
the project? What functionality is essential to be
successful versus “nice to have?” In short, do I know
what I am building and how this might change over
time?
Examples of specific risk factors in this quadrant
include misunderstanding requirements and not
managing change properly. Both are viewed as critically
important items, but ones over which the project
manager has considerable control.
Quadrant 2 risk mitigation strategies should
emphasize the management of ambiguity and
change. More often than not, it is impossible to pin
down the exact requirements at the outset of a project,
hence the popularity of various evolutionary
approaches toward system development such as the
spiral model [3]. As time progresses, the scope and
requirements should become clearer and the users
should develop more realistic expectations of what
the system will do. One tactic that is helpful in
establishing the scope of a project is to specify what
will not be included in the project. To avoid the
common problem of scope creep, project managers
should educate the user/customer on the impact of
scope changes in terms of both project cost and
schedule. To further guard against Quadrant 2 risks,
project managers must be willing to draw a line
between desirable and absolutely necessary functionality.
Techniques like multicriteria decision-making
methods and function-point analysis are useful in
such exercises.
A project is being driven by the user
nother useful tactic for combating
Quadrant 2 risks is to ensure that the
community and not the developers
[8]. Users/customers should be continually reminded
of the important role that they play in defining the
system's functionality. As one project manager put it:
“[I tell them:] You own that application layerwhatever
you need it to look like
and however you need it to function
that's yours and if you don't
tell me I can't make it. I don't know
your job. You have to tell me how it
works.”
To summarize, the risks in this
quadrant can be largely controlled
by the project manager, but do
require skillful interfacing with the
user/customer. Effective processes for
managing change and ambiguity are
needed. The real danger associated with
Quadrant 2 is that project managers may overestimate
their own abilities or fail to realize their own
limitations. In either case, this can lead to an underestimation
of the risks associated with this quadrant
or a failure to develop appropriate risk mitigation
strategies.
Quadrant 3: Execution. The risks in Quadrant 3
concern the actual execution of the project. Relevant
questions for project managers to ask are: Can the
complexities of the system development and implementation
be managed successfully? Do I have
enough people with the requisite skills and knowledge?
In short, given what I know about the project
scope and requirements, do I have a team in place
that can successfully execute this project?
Examples of specific risk factors in this quadrant
include many of the traditional pitfalls associated
with poor project management [3]. Issues of inappropriate
or insufficient staffing, lack of effective
development process methodology, poor estimation,
and improper definition of roles and responsibilities
can all be located in this quadrant. In general, the
experienced project managers who served as our panelists
believed they had reasonable control over these
risks, and hence they regarded them as moderate
rather than high-risk items.
The risk mitigation strategy for Quadrant 3
should emphasize internal evaluations coupled with
external reviews to keep a project on track. Tactics
include using disciplined development processes and
methodologies to break the project down into manageable
chunks, clearly defining roles and responsibilities,
and developing contingency plans to cope
with staffing shortfalls and new technologies. That
is, to successfully counter Quadrant 3 risks, project
managers must follow an established development
methodology and proactively anticipate and respond
to events that can threaten the development process.
It is important to note that under normal circumstances,
Quadrant 3 risks should not pose a serious
threat to the project (hence, their low perceived
importance). Basically, risks that fall in this quadrant
are generally within the project manager's
realm of control. But project
managers cannot afford to become
complacent in their handling of
these risks. Failure to manage the
risks in this quadrant can result in
poor quality software that is delivered
late and over budget (if it is
indeed delivered at all).
Quadrant 4: Environment. Risks in
this quadrant can be traced to the project
environment that exists both inside and
outside the organization. While our panelists focused
their attention on internal risks, this quadrant could
include risks in the external environment (for example,
natural disasters or changes in the competitive
environment). Relevant questions for project managers
to ask are: What are the things that can happen
inside the organization that would threaten this
project? What are the external events that could
threaten the project? In short, what are the things
that can go wrong that we haven't addressed in the
other quadrants?
Examples of specific risk factors in this quadrant
include changing scope/objectives (due to changes in
senior management or the business itself), and conflicts
that may arise between user departments.
The risks in Quadrant 4 are those over which the
project manager has little or no control. They have a
low likelihood of occurrence and are, therefore, not
viewed as being terribly important. Yet, when they
hit a project, they can be significant and dangerous.
Quadrant 4 risks are among the most difficult to
anticipate and plan for because there is a dearth of</zone>
  <zone label="MET_BIB_INFO">COMMUNICATIONS OF THE ACM November 1998/Vol. 41, No. 11</zone>
  <zone label="GEN_OTHER">81</zone>
  <zone label="BODY_CONTENT">experience in dealing with them. Contingency plan- project manager. Most panelists indicated their
ning, including concepts and tactics associated with perceptions of risk were higher for those items over
disaster planning, is the most sensible strategy for which they had little or no control. Based on this
dealing with Quadrant 4 risks. Scenarios represent observation, we developed and presented a typolanother
approach for developing plans to deal with ogy of project risk factors and used this to suggest
these risks should they occur. possible risk mitigation strategies. One
of the strengths of this approach is that
Conclusions instead of focusing on individual risk facUsing
a systematic approach, we tapped the tors, it provides a higher-level frameexperience
of more than 40 software project work for thinking about four distinct
managers from around the globe to iden- types of software project risk (and
tify a universal set of risk factors. The different strategies for addressing each
three most important risk factors type).
were judged to be a lack of top In comparing our results to Boehm's,
management commitment to the we find that some of the most important
project, a failure to gain user com- risks identified by our panelists (such as,
mitment, and a misunderstanding the risks relating to customer mandate) are missrequirements.
These and the other identified risk fac- ing entirely from Boehm's top 10 risk list [4].
tors can serve as a useful checklist for conducting risk Instead, Boehm's list (and much of the existing softassessments
of software projects [12]. ware project risk literature) focuses on what we have
One of the most interesting findings from this labeled “execution” risks. One explanation for this
study is the fact that the risks perceived to be most may be that Boehm and others chose to focus on
important often lie outside the direct control of the those risk factors over which the project manager has
How the Study was Conducted
This study employed a varia- parisons to be made across mul- ing each panelist select the 20
tion on the traditional Delphi sur- tiple panels. The Delphi survey risks deemed to be most imporvey
approach designed to elicit consisted of three phases. In the tant. For each country panel, risk
opinions from a panel of experts first phase, a brainstorming factors that were selected by 50%
through iterative, controlled round was conducted to elicit as or more of the panelists in that
feedback. Three expert panels many risk factors as possible country were retained for the
were formed by recruiting from from each of the panels. The out- next phase of the study. The risk
among experienced project man- put of all three panels was then factors retained included a set of
agers in each country. A total of consolidated to produce a list of 11 risk factors common to all
45 software project managers 53 risk factors. The consolida- three panels.
were initially recruited for the tion process ensured the three The third and final phase of the
study and 41 of these individuals panels had access to a common study involved the actual ranking
chose to participate in all phases list of factors with common defi- and rating of risk factors. Ranking
of the research; 19 on the USA nitions. During subsequent and rating rounds were conpanel,
13 on the Finnish panel, phases, the panels were allowed ducted until each panel reached
and 9 on the Hong Kong panel. to operate independently, each an acceptable level of consensus.
On average, panelists had 16 one selecting (and later ranking KendallÕs Coefficient of Concoryears
of work experience and had and rating) the most important dance [11] was used to measure
managed more than 20 software risk factors from this common the degree of consensus among
projects. pool of factors. panelists for each country.
We adopted a method for the The purpose of the second Rounds of ranking were repeated
Delphi survey developed by phase was to narrow the list of until either the panelists reached
Schmidt [11] which provides a items to a manageable number strong consensus or consensus
statistical measure of consensus that could be meaningfully ranked did not change from one round
within the panel and allows com- and rated. This was done by hav- to the next.</zone>
  <zone label="GEN_OTHER">82</zone>
  <zone label="MET_BIB_INFO">November 1998/Vol. 41, No. 11 COMMUNICATIONS OF THE ACM</zone>
  <zone label="BODY_CONTENT">a relatively high degree of control. One implication
of our study, however, is that project managers
should not restrict their attention to project execution
risks. Instead, they should determine if they
have the support and commitment to carry out the
project (Quadrant 1); manage the ambiguity and
change associated with establishing system scope
and requirements (Quadrant 2); select a risk-driven
execution strategy (Quadrant 3); and be able to
anticipate and respond to unexpected changes in the
environment (Quadrant 4). Accordingly, the framework
presented here encourages managers to explore
a broader set of factors in performing risk assessments.
Looking to the future, the effectiveness of different
strategies for managing each type of risk needs
to be carefully assessed. c</zone>
  <zone label="GEN_REFERENCES">References
1. Alter, S. and Ginzberg, M. Managing uncertainty in MIS implementation.
Sloan Manage. Rev. 20, 1 (1978), 23-31.
2. Barki, H., Rivard, S., and Talbot, J. Toward an Assessment of Software
Development Risk. J. Manage. Info. Syst. 10, 2 (1993), 203-225.
3. Boehm, B. and Ross, R. Theory-W software project management:
principles and examples. IEEE Trans. Softw. Eng. 15, 7 (1989),
902-916.
4. Boehm, B.W. Software Risk Management: Principles and Practices.
IEEE Softw. 8, 1 (1991), 32-41.
5. Charette, R.N. Software Engineering Risk Analysis and Management. Intertext,
New York, 1989.
6. Johnson, J. Chaos: The dollar drain of IT project failures. Applic. Dev.
Trends 2, 1 (1995), 41-47.
7. Jones, C. Assessment and Control of Software Risks. Prentice-Hall, Englewood
Cliffs, N.J., 1994.
8. McFarlan, F.W. Portfolio approach to information systems. Harvard
Bus. Rev. 59, 5 (1981), 142-150.
9. Newman, M. and Sabherwal, R. Determinants of commitment to information
systems development: A longitudinal investigation. MIS Q. 20, 1 (1996).
10. Sauer, C. Understanding support-Lessons from a case study. Austrailian
J. Info. Syst. 1, 1 (1993), 63-74.
11. Schmidt, R.C. Managing Delphi surveys using nonparametric statistical
techniques. Decision Sciences, 28 3 (Summer 1997), 763-774.
12. Schmidt, R.C., Lyytinen, K., Keil, M., and Cule, P. Identifying Software
Project Risks: An International Delphi Study. Hong Kong University
of Science and Technology Working Paper (1997).</zone>
  <zone label="MET_AFFILIATION">Mark Keil (mkeil@gsu.edu) is an associate professor in the
Department of Computer Information Systems at Georgia State
University.
Paul Cule (culep@biz.mu.edu) is assistant professor of
Management in the College of Business Administration at
Marquette University, Milwaukee, Wis.
Kalle Lyytinen (kalle@jytko.jyu.fi) is a professor in
Information Systems at the University of Jyväskylä, Finland.
Roy Schmidt (roy@bradley.edu) is an assistant professor in the
Foster College of Business Administration at Bradley University,
Peoria, Ill.</zone>
  <zone label="BODY_CONTENT">Permission to make digital or hard copies of all or part of this work for personal or classroom
use is granted without fee provided that copies are not made or distributed for
profit or commercial advantage and that copies bear this notice and the full citation on
the first page. To copy otherwise, to republish, to post on servers or to redistribute to
lists, requires prior specific permission and/or a fee.</zone>
  <zone label="MET_DATES">© 1998 ACM 0002-0782/98/1100 $5.00</zone>
  <zone label="MET_BIB_INFO">COMMUNICATIONS OF THE ACM November 1998/Vol. 41, No. 11</zone>
  <zone label="GEN_OTHER">83</zone>
</document>