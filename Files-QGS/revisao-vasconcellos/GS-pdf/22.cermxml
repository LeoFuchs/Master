<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.0 20120330//EN" "JATS-archivearticle1.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
  <front>
    <journal-meta>
      <journal-title-group>
        <journal-title>IEEE TRANSACTIONS ON SOFTWARE ENGINEERING</journal-title>
      </journal-title-group>
    </journal-meta>
    <article-meta>
      <title-group>
        <article-title>Managing Process Inconsistency Using Viewpoints</article-title>
      </title-group>
      <contrib-group>
        <contrib contrib-type="author">
          <string-name>Ian Sommerville</string-name>
        </contrib>
        <contrib contrib-type="author">
          <string-name>Member</string-name>
        </contrib>
        <contrib contrib-type="author">
          <string-name>/ € € E Computer Society</string-name>
        </contrib>
        <contrib contrib-type="author">
          <string-name>Pete Sawyer</string-name>
        </contrib>
        <contrib contrib-type="author">
          <string-name>Member</string-name>
        </contrib>
        <contrib contrib-type="author">
          <string-name>/E€€ Computer Society</string-name>
        </contrib>
        <contrib contrib-type="author">
          <string-name>Stephen Viller</string-name>
        </contrib>
        <contrib contrib-type="author">
          <string-name>Member</string-name>
        </contrib>
        <contrib contrib-type="author">
          <string-name>/E€€ Computer Society</string-name>
        </contrib>
      </contrib-group>
      <pub-date>
        <year>1999</year>
      </pub-date>
      <volume>25</volume>
      <issue>6</issue>
      <fpage>784</fpage>
      <lpage>799</lpage>
      <abstract>
        <p>This paper discusses the notion of process inconsistencyand suggests that inconsistenciesin softwareprocesses are inevitable and sometimes desirable.We present an approachto process analysisthat helps discoverdifferent perceptionsof a software process and that supportsthe discovery of process inconsistenciesand process improvementsstimulated by these inconsistencies.By analogy with viewpointsfor requirementsengineeringthatallow multipleperspectivesona software system specificationto be managed, we have developedthe notion of process viewpointsthat provide multiperspective descriptions of softwareprocesses. A process viewpoint includesa statement of focus or "world-view,"aset of sources of process information,a process description and a set of organizationalconcernsthat represent goals or constraintson the process analysis.We present a description and rationale of process viewpoints, discuss the process of applying process viewpoints for process understandingand illustratethe overail approach using part of a case study drawn from industrial processes that are pari of a safety-criticalsystem development.</p>
      </abstract>
      <kwd-group>
        <kwd>-Viewpoints</kwd>
        <kwd>software process</kwd>
        <kwd>process improvement</kwd>
      </kwd-group>
    </article-meta>
  </front>
  <body>
    <sec id="sec-1">
      <title>-</title>
      <p>IEEE TRANSACTIONSON SOFTWARE ENGINEERING. VOL. 25, NO. 6, NOVEMBERIDECEMBER 1999
1 INTRODUCTION</p>
      <p>
        I . Fundamental research concerned with process
modeling, enactment, and support technology. This
involves developing notations for representing
processes and looking at how some automated support
for these processes can be provided. Good summaries
of research in this area are provided by [l],[Z].
2. Research concerned with process improvement, that
is, the introduction of process changes to improve
software productivity, quality, etc. This is related to
general work on business process reengineering [
        <xref ref-type="bibr" rid="ref3">3</xref>
        ]
although software process improvement programs
tend to be evolutionary rather than revolutionary. The
best known work in this area is that of the Software
Engineering Institute and their Capability Maturity
model [
        <xref ref-type="bibr" rid="ref4">4</xref>
        ], [
        <xref ref-type="bibr" rid="ref5">5</xref>
        ] but other related work on maturity
models (Bootstrap and SPICE) for process
improvement has also been carried out [
        <xref ref-type="bibr" rid="ref6">6</xref>
        ],[
        <xref ref-type="bibr" rid="ref7">7</xref>
        ].
e The authors are with the Computing Depnrtment, Lancnster Uniucmity,
      </p>
      <p>Lancaster LA1 4YR UK. E-mail: lis, sawyer, vlllcrlBcomp.1nncs.ac.uk.</p>
      <p>To a large extent, these different aspects of process R&amp;D
have been parallel research streams. The fundamental
process research has not really addressed the issues of
how the research results can be applied to facilitate change
and improvement. The process improvement work has
taken a pragmatic approach to process description and is
not dependent on structured or formal process notations.</p>
      <p>Proponents of this approach suggest that automation is not
central to process improvements. Indeed, the SEI Capability
Maturity model discourages automation in the early stages
of improvement. Its developers believe that process
enactment support is unlikely to add significant value to
managers or developers until a disciplined and repeatable
process has been put in place.</p>
      <p>Process improvement frameworks such as the Capability
Maturity model, the Bootstrap model, and the SPICE model
are based on improving process maturity by introducing
good engineering practice. They are designed to be
independent of the current process and this is both their
strength and their weakness. It is a strength as it allows the
frameworks to be generic; it is a weakness as it does not
support improvements based on good features of the
existing processes that lie outside the inprovement model.</p>
      <p>While we are generally supportive of process
improvement frameworks, we believe that process improvement is
more likely to be accepted if we understand existing
processes and evolve these processes in ways that maintain
their strengths. As discussed next, these processes are often
inconsistent so to understand them we must understand this
inconsistency. To help with this understanding, we have
developed a framework for managing process descriptions
and an associated process analysis process that reveals the
process inconsistencies and uses them to identify potential
process improvements. Our work, therefore, supplements
and is complementary to process improvement frameworks
and does not overlap with them.</p>
      <p>
        The work that we describe in this paper was carried out
in a project that was specificallyaimed at discovering routes
to requirements engineering process improvement [8]. It is
part of a spectrum of work to assist process improvement
including the development of methods for human factors
analysis of processes [
        <xref ref-type="bibr" rid="ref27">9</xref>
        ], the development of good practice
guidelines for requirements engineering processes [8], and
the development of a practical viewpoint-oriented approach
to requirements engineering [lo], [11].
      </p>
      <p>In the remainder of the paper, we discuss different types
of process inconsistency and how an understanding of
inconsistency can lead to process improvements. We then
go on to describe our viewpoint-based process analysis
framework and the process of applying viewpoints for
process analysis. Finally, we present a small case study of
using the approach for the analysis of process descriptions
in a safety-critical system, illustrate process inconsistencies
that were discovered, reflect on the lessons learned, and
draw some conclusions about our work.</p>
    </sec>
    <sec id="sec-2">
      <title>1.1 Process Inconsistency</title>
      <p>There are two opposing sets of beliefs about processes. One
belief is that processes are ways of describing how work
should be done. A process model or process description is a
representation of this ideal process. Process inconsistencyis
seen as a discrepancy in these process descriptions or a
discrepancy between these process descriptions and the
actual process. Process improvement is achieved by
modifying the actual process to make it more prescriptive
and compliant with this ideal process. Inconsistency is
undesirable and the rationale for identifying inconsistency
is to remove it from process descriptions. This belief is
widespread in the software engineering community and is
exemplified by research concerned with process
programing and process enactment support tools [12], [13], [14] and
with process changes through the introduction of good
practice [15].</p>
      <p>An alternative belief, which is the norm among those
interested in the sociology of work, is that processes are
ways of describing how work is done. A process description
or model is not a description of an ideal process with some
gap between that process model and reality but is simply a
description of the work as it is actually carried out by the
people involved in the process. There is, therefore, no
distinction between a process and a process description.
Process inconsistency, in this view, means that different
actors reach the same goal in different ways. Process
improvement is achieved through identifying good
practice, relating it to the existing process and convincing actors
in the process to change the way that they work and adopt
that practice. From this social perspective, process models
may have an educational role but they should not be
prescriptive. Prescribing processes to remove
inconsistencies can lead to reduced process efficiency because the
people involved feel that their professionalism is being
undermined [16].</p>
      <p>We have been influenced by both of the above opinions
about processes. A standardized process model is helpful to
facilitate communicationsabout processes and to get started
on activities. Such a model must define key points where
the documented and actual processes must be in line with
each other. The number and extent of these varies
depending on the type of application being developed
and the size of the development team. In a research
environment, there need only be a few areas of
correspondence between defined and actual processes; in the
development of a large, critical system there should be
much less divergence between the published and the actual
process. However, any practical process must allow scope
for professional judgment and different working practices.</p>
      <p>The above perspectives highlight the problems of
arriving at a simple definition of process inconsistency.
From a formal perspective, inconsistency can be considered
as some kind of logical contradiction so, with formally
defined process models, inconsistencies can be detected by
mathematical analysis. Some specific work on process
inconsistencies, based on formal process models, has been
reported by Cugola et al. [17]. In this work, they define
formal models of both human-centered processes and
process-support systems. The models that they propose
are state-based and they introduce the notion of a deviation
(an event that leads to an inconsistent state) and an
inconsistent state which is a state that is not a member of
the inconsistent states defined by their model. There can be
inconsistencies in the model of the human-centered system
(which they suggest may be tolerable) and between the
model of the human-centered system and the process
support system.</p>
      <p>However, mathematical models of processes rarely
reflect the reality of everyday work. If processes are
considered from a social and organizational perspective, it
is much more difficult to define process inconsistency in a
precise and unambiguous way. Inconsistencies are
differences of various kinds in the ways in that different people
perceive or execute a process. For example:
1. Inconsistencies in process execution. Many tasks require
sofhvare engineers to exercise professionaljudgment
and experience. Different people may do the same
thing in differentways, all of which may be effective.
For example, one requirements engineer may elicit
information about requirements by defining
structured system models and discussing these models
with end-users. Another engineer may prefer to
develop a prototype system and work through this
with end-users. Each engineer uses their
professionaljudgment to decide which is the best approach
in a particular context.
2. Inconsistencies in process organization. Different
processes with the same objectives may have developed
in different parts of the organization'as a
consequence of local factors such as tool and equipment
availability, management style, etc. For example,
configuration management processes in the same
company may differ because some engineers use
Unix workstations and some use PC-based systems
for software development. Here the inconsistency is
not a matter of professional judgment but of
managerial decisions that may be historical or that
may take into account local organizational factors
such as the experience of the workforce or budg-ets
for tool procurement.
3. Inconsistencies of process perception. Depending on
their particular interests, different people may
focus on different aspects of a process. For
example, a software engineer may be mostly
concerned with process activities that arc involved
in the production of the system whereas a project
manager is concerned with the scheduling and
resources used by activities identified in the
project plan. There may be a mismatch between
the project plan activities (the manager's
perspective) and the actual activities involved in
developing the software (the engineer's perspective).</p>
      <p>The above inconsistencies are not mutually exclusive and
may coexist. Furthermore, the meaning of these
inconsistencies depends on the particular process perspective that is
adopted. For example, from an engineering perspective,
inconsistencies in process execution reflect either an
inadequate underlying process that does not include descriptions
of possible alternative approaches or inconsistencies in the
process description. From a sociological perspective,
however, inconsistencies in process execution are fundamentalto
the notion of professionalism and reflect a process strength
rather than a process weakness. From an engineering
perspective, inconsistencies in process organization reflect
the failure of an organization to standardize its processes;
from a sociologicalperspective, they reflect the ability of the
organization to adapt its processes to local circumstances.</p>
      <p>A fundamental assumption underlying our work is that
it is important to understand process inconsistencies in
actual processes because these inconsistencies may point to
potential process improvements:</p>
      <sec id="sec-2-1">
        <title>Areas of inconsistency may be accidental in that there arc no good reasons for them; reconciling these inconsistencies may lead to more efficient process enactment.</title>
        <p>Areas of inconsistency may suggest process
redundancy where activities are unnecessary. Fully or
partially removing this redundancy may lead to
process improvements.</p>
        <p>Areas of inconsistency can highlight particularly
good practice. Where different processes for
accomplishing some goal have evolved, the most effective
of these processes may be selected for widespread
dissemination across the organization.</p>
        <p>We consider process inconsistency management to be the
activities involved in eliciting process details, analyzing and
identifying process inconsistencies, and "resolving" these
inconsistencies. Resolving inconsistencies docs not mean
that these inconsistencies arc necessarily removed from the
different process perspectives or descriptions of the process.
Where .appropriate, there may be process modifications to
remove the inconsistency but, in other cases, all that may be
necessary is to flag the inconsistencies and ensure that the
reason for their existence is understood by the process
participants.
2</p>
        <sec id="sec-2-1-1">
          <title>PROCESSVIEWPOINTS</title>
          <p>
            Most research on process modeling notations [
            <xref ref-type="bibr" rid="ref17">18</xref>
            ]has been
based on the assumption that a single model of the process
can be elicited and agreed upon by all process participants.
As we have already discussed, we do not believe that this
deterministic perspective reflects the reality of software
processes. Nor do we believe that it necessarily a goal that
will lead to more effective software processes. Our
experience from working with industry on process studies
suggested that:
          </p>
          <p>Different people involved in the "same" process
think of and describe that process in completely
different ways. These differences are so significant
that there is no practical way of combining the
different descriptions into a single description or
model except at a very abstract level. Attempting to
integrate detailed process descriptions to produce a
shared model results in a model of such complexity
that it is unrecognizable to the process participants
and is effectively useless for analysis.</p>
          <p>There is no single notation that all process
participants and stakeholders arc familiar and comfortable
with. People want to describe "their" process in their
own way and imposing some, perhaps formal,
notation on this is counterproductive. We believe
that there is a lot to be said for Checkland's "rich
pictures" I191 where processes are described using
representations that arc meaningful to the people
involved in the process.</p>
          <p>
            Viewpoints, first proposed by Mullery for requirements
engineering [20] are a technique for organizing and
structuring partial descriptions of a system. Our previous
experience of requirements engineering viewpoints [21],
[
            <xref ref-type="bibr" rid="ref20">22</xref>
            ] suggested that they might be an appropriate
framework for encapsulating process perspectLvcsW.e decided to
adapt the approach to requirements viewpoints that we had
developed [lo]for process representation. This approach to
requirements engineering was explicitly designed for
application in a range of industrial applications 1111. It
allows for different types of viewpoint (end-user,
stakeholder, domain) to be accommodated within a single
generic framework and provides a mechanism whereby
business goals and constraints drive the requirements
engineering process.
          </p>
          <p>Process viewpoints are an approach to inconsistency
management that support the activities of process
elicitation, analysis, and understanding. They encapsulate process
information elicited from different sources and allow the
process to be described in notations that arc familiar to the
sources of the viewpoint information.</p>
          <p>
            Our initial process viewpoint model was based on our
requirements viewpoint model [
            <xref ref-type="bibr" rid="ref21">23</xref>
            ]but found that this was
not entirely workable in practice. We, therefore, derived a
simpler model of a process viewpoints with five
components as follows:
PV = &lt; name, coricerns, locus, sources, processdcscription&gt;
          </p>
          <p>Briefly, the name identifies the viewpoint, the concems
reflect business goals and constraints, the focus sets out the
particular viewpoint perspective, the sources document the
source of process information and the process description is a
description of the process from the perspective defined in
the viewpoint focus.</p>
          <p>A very simple example of a process viewpoint is shown
in Fig. 1. This is a viewpoint on a requirements review
process. For simplicity, we have not actually included the
process description here.</p>
          <p>We must emphasize that process viewpoints are not
projections of some underlying, definitive process and that
merging the process descriptions in the different process
viewpoints does not lead to a global model of the process.
As discussed, a fundamental assumption underlying our
work is that it is practically impossible to produce a single,
detailed process model that accurately reflects the real,
complex processes in which participants are involved.</p>
        </sec>
      </sec>
    </sec>
    <sec id="sec-3">
      <title>2.1 Viewpoint Naming</title>
      <p>The name of the process viewpoint is a meaningful
identifier that should reflect the process perspective
documented in that viewpoint. For example:
e</p>
      <sec id="sec-3-1">
        <title>The name of a’role or department in an organization</title>
        <p>such as ”configuration management,” ”quality
assurance,” “customer,” etc. This implies that the
process description will focus on the process
activities, inputs and outputs that are most
important to that department or role.</p>
        <p>The name of a process characteristic that is of
particular interest. This can either be a functional
characteristic such as ”process activities,” “roles
and actions,” or can be a nonfunctional process
attribute such as “repeatability,” ”performance,”
etc. The particular process characteristic may be
reflected in the notation used for the process
description. For example, in a ”process activities”
viewpoint, a Petri net based notation may be used;
in a ”performance” viewpoint, the process may be
represented using bar charts.</p>
      </sec>
    </sec>
    <sec id="sec-4">
      <title>2.2 Concerns and Concern Decomposition</title>
      <p>Process improvement should always be driven by the needs
of the organization enacting the process. To allow for this,
we have introduced the notion of viewpoint concerns that
reflect organizational goals, needs, priorities, constraints,
etc. Concerns are not just another type of viewpoint. A
viewpoint is an encapsulated process description; a concern
relates the process description to the business needs of the
organization enacting the process. Concerns cut across
viewpoints and drive the process analysis so that proposed
process changes and improvements contribute to the real
needs of the business.</p>
      <p>We have identified several different classes of concern:
e Understanding concerns. These reflect the
organization’s objectives for process understanding. The
organization may wish to understand a process to
discover its relationships with other organizational
processes, to define the process in a quality plan, to
analyze the process for improvements, etc. Where an
organization has immature processes,
understanding these processes is the first step toward process
definition and, ultimately, improvement.
e Improvement concerns. These reflect the objectives of
the organization as far as process improvement is
concerned. At a very abstract level, these may be
reduced time to process completion, reduced process
costs, etc. However, aswe discussbelow, thesehave to
be decomposed into realistically achievable goals.
e Constraint concerns. These are organizational
constraints placed on the process or on the process
improvement activity. They may limit the analysis or
possible process improvements.</p>
      <p>
        Concerns are similar to goals in Basili and Rombachs
GQM approach to process measurement [
        <xref ref-type="bibr" rid="ref22">24</xref>
        ]. In practice,
therefore, concerns are decomposed into a set of questions
that are put to process sources. Therefore, if an
understanding concern is process definition, then this may be
translated into an abstract question:
“What are our requirements engineering process activities.”
      </p>
      <p>If an improvement concern is process cost reduction, the
most abstract question becomes:
”How can the costs of the process be reduced.”</p>
      <p>However, these questions are so general and abstract
that they are not particularly useful for eliciting process
details. Therefore, concerns are decomposed into
subconcerns and, ultimately, into a specific question list which
may be put to viewpoint sources.</p>
      <p>Quality management
Time to market, product defects
The requirements review process and how overall system qualily may bc
influenced by that process.</p>
      <p>Product defects arc being introduccd as a rcsult of requircmcnts errors. Product
development schedules are longer than they should be because of the need to
detect and remove these errors.
project managers, quality managers, company standards,
A description of the review process including inputs, outputs, activities,
process participants and commentary on the process and its influence on</p>
      <p>Concerns
(Goals/constraints)</p>
      <p>I</p>
      <p>Leadto
Questions</p>
      <sec id="sec-4-1">
        <title>Process viewpoint</title>
        <p>Help</p>
        <p>As a n illustration of this, Fig. 2 shows how the
improvement concern to reduce costs might be
decomposed. Notice that improvement concerns will almost
always decompose to a mixture of understanding
subconcerns (what are we doing now?) and improvement
subconcerns (how can we do it better?). It is artificial to
try to separate these as knowledge that can contribute to
improvement emerges naturally as understanding of the
process is developed.</p>
        <p>Specific questions may be associated with nodes in this
decomposition. In this example, we may have:
1, Budget. The budget available to the process
improve</p>
        <p>ment team is SXXXX.
2. Existing tools and standards. Existing design notations
such as SADT must be used to describe the system
requirements.
3. Training. Proposed improvements should require no
more than Y days of additional training time per team
member (or alternately Z days akrossthe whole team).</p>
        <p>These concerns are process requirements and process
improvements that are proposed must be validated against
them.</p>
        <p>Q1. What are the types of resource used in each activity? 2.3 Viewpoint Focus
Q2. How much of each resource is used in each activity? A viewpoint’s focus is a succinct description of the
viewpoint’s perspective on the process. It, therefore, adds
43. Does the output from the activity justify the resource to the information implied by the viewpoint name. The
input? focus description should normally identify the subprocesses
Q4. Are there comparable activities that use dispropor- that are of interest to that viewpoint. It may also include a
tionate amounts of some resource? statement of the organizational functions that are significant
in the analysis of a process, a statement of the role of
viewpoint sources or a statement of the particular type of
model that will be presented.</p>
        <p>Examples of focus descriptions might, therefore, be:
”Configurationmanagement in the requirements
engineering process,”</p>
        <p>The formulation of questions helps identify the level of
detail that should be included in a process description. In
essence, the detail in the description must allow these
questions to be answered. If the process description is too
abstract, the questions cannot be answered and if it is too
detailed, the questions are lost in that detail. Therefore,
several attempts at the process model are likely to be required In this case, the subprocess is the requirements
engineerwith the questions used to test the detail of the model. ing process and this process is of interest from a
config</p>
        <p>For the above set of questions associated with the cost uration management perspective.
reduction concern, the process description must identify the “A system architect‘s view of the requirements engineering
activities for which resource utilization information is process”
available. The costs of these activities can then be computed Again, the subprocess is the requirements engineering
before and after the process improvement has been process but the perspective is that of the system architect.
implemented. If this information is not available, process He or she will not necessarily be interested in the same
improvements cannot be evaluated. In such a situation, activities as the configuration manager.
attempts at process improvement do not make sense until ”An entity-relationshipmodel of the documents used in the
process data collection has been implemented. quality management process”</p>
        <p>As well as understanding and improvement concerns, Here the subprocess is the quality management process
organizations also place constraints on both the process and the perspective is stated in terms of the models that
improvement process and the possible improvement should be included in the viewpoint.
proposals. These constraints may also be expressed as We have found that explicitly defining the focus of a
concerns and decomposed into questions that must be viewpoint is valuable for three reasons:
addressed during the stages of process analysis and
improvement suggestion. Examples of concerns that are
constraints might be:
1. It helps to identify sources of process information.
2. It can be used in the development of organizational
concerns.
3. It can be used to help discover overlapping
viewpoints (where inconsistencies in process perception
are most likely) and gaps in the viewpoint coverage
of the process.</p>
        <p>detail of the enactment, they can be accommodated within a
single process description.</p>
        <p>These differences are accommodated by including a
stable part and a variable part in the process description:</p>
        <p>
          The viewpoint focus may also have an associated
rationale that is comparable to the notion of Weltanschauung
or ”world view” in Soft Systems Methodology [19], [
          <xref ref-type="bibr" rid="ref23">25</xref>
          ].
        </p>
        <p>Examples of rationale which could be associated with the
above focus descriptions are:
“Our current configuration management process is not
integrated with our requirements engineering process”
”System architects are normally consulted after the
requirements have been defined and this can cause serious design
problems”
“We need a formal description of the process entities to
support improved configuration management”</p>
        <p>This rationale presents assumptions on which the
viewpoint is based and helps the reader understand why the
viewpoint has been identified for process analysis.
2.4</p>
      </sec>
    </sec>
    <sec id="sec-5">
      <title>Viewpoint Sources</title>
      <p>Viewpoint sources are an explicit record of where the
information about the process has been collected. The most
important sonrces of process information are usually:</p>
      <sec id="sec-5-1">
        <title>I . the participants in the process</title>
        <p>2. management in the organization where the process
is being enacted.
3. organizational process charts, responsibility charts,
quality manuals, etc.</p>
        <p>The list of sources connected with a viewpoint is useful
because it provides an explicit trace to where the process
information was derived. This allows the original sources to
be consulted for possible problems when process
improvements and process changes are proposed. Source
information may be represented as names, associated roles, and
contact information if the sources are people, document
identifiers, page references, and Web URLs, etc.</p>
      </sec>
    </sec>
    <sec id="sec-6">
      <title>2.5 Process Description</title>
      <p>We do not mandate any particular notation for process
description. Our experience showed that most engineers in
industry prefer informal process descriptions made u p of
diagrams and explanatory text. While these are more
subject to misinterpretation than formal descriptions, we
believe that this is more than compensated for by their
understandability and flexibility in describing processes
where exceptions are common. Of course, for some
viewpoints that are concerned with particular types of process
model, such as an entity-relationshipmodel, an appropriate
formal or structured notation may be used.</p>
      <p>Because of individual differences in process enactment,
there may be alternative perceptions of a process presented
by different sources in the same viewpoint. This is
particularly likely where one of the sources is process
documentation that defines the organizational perception of
a process (or what a process ought to be) and another
source is a process participant who can explain what really
happens. If these differ very radically, they should really be
separate viewpoints but where the differences are in the
1. The stable part of a process description is the part of
the description that is shared and accepted by all of
the sources contributing to the process viewpoint.
2. The variable part of the process description highlights
those parts of the process that exhibit variability and
documents the differentways in which this variability
occurs. In many cases, the variability manifests itself
in the exception handling-different people cope with
problems in different ways.</p>
      <p>Describing processes using stable and variable parts is
one way of tolerating inconsistency in process descriptions.
As we discuss in Section 3, that describes the process of
acquiring process descriptions, we try to reconcile
inconsistencies as soon as they emerge but, if this is impossible,
we simply leave them in the description. The inconsistency
analysis that we also discuss later is then applied within the
viewpoint as well as across process viewpoints.</p>
      <p>The process description may be a hierarchical
description with the process described at different levels of
abstraction. At the top level, we recommend that the
process description should fit onto a single page so that it
may be understood as a whole. All, or some parts of, the
process may then be described in more detail as necessary.
3</p>
    </sec>
    <sec id="sec-7">
      <title>USING PROCESS VIEWPOINTS IN PROCESS</title>
      <sec id="sec-7-1">
        <title>ANALYSIS</title>
        <p>The process viewpoint model that we have described is
intended to help elicit and analyze information about
processes with a view to subsequent process improvement.</p>
        <p>To support the use of the model, we have developed a
process for process modeling and improvement that is
shown in outline in Fig. 3.</p>
        <p>In the notation that we use here and in later figures,
process activities are denoted in boxes. Dashed arrows
linking boxes mean that there is a temporal relationship
between these activities. It is not possible for an activity at
the destination of an arrow to be completed until the
activity at the source of the arrow has completed. However,
the destination activity may start before the source activity
has completed and the activities may be interleaved or may
run concurrently. In Fig. 3, the arrow linking the last box
with the first box means that the process is cyclic and can be
reentered after a set of improvements have been proposed.</p>
        <p>The overall process has four main phases:
1. Concern definition. During this phase, the main
business goals and constraints are identified. The
people involved are the process improvement team,
senior managers in the organization, and project
managers. Concerns are decomposed into a set of
questions as discussed above.
2. Viewpoint and source identification.Possible viewpoints
and associated sources of process information are
identified in a review involving process participants
and the process improvement team. We discuss this
stage in more detail below.</p>
        <p>CO"CCl.nS
---+
Inconsistency</p>
        <p>IC,IOlt
rroccss
desciiptioiis</p>
        <p>IEEE TRANSACTIONS ON SOFTWARE ENGINEERING, VOL. 25. NO. 6, NOVEMBERIDECEMBER1999
definition and
question formulation
identification
and process</p>
        <sec id="sec-7-1-1">
          <title>Organisational concern definition</title>
        </sec>
        <sec id="sec-7-1-2">
          <title>Understanding and analysis and analysis</title>
          <p>I</p>
        </sec>
        <sec id="sec-7-1-3">
          <title>F Time Iinprovemcnt planning Fig. 3.Process improvement with viewpoints,</title>
          <p>3. Datn collection and process description. Information
about the process is collected and the process is
documented. Process inconsistencies are identified
during this stage. Again, we discuss this in more
detail below.
4. Improvement suggestion and analysis. The processes as
described in each viewpoint are compared and
analyzed. Process inconsistencies are the focus for
improvement and may point to potential process
modifications to select best practice or to reconcile
these inconsistencies. Improvements are analyzed
against the concerns to ensure that they are
consistent with business goals.</p>
          <p>As the theme of this paper is process viewpoints and the
support they provide for managing inconsistency, we will
concentrate on the middle two stages, where viewpoints are
applied and process inconsistencies are identified. Fig. 4 is a
more detailed description of these two stages. In this figure,
solid arrows between activities indicate data flow.</p>
          <p>The process is iterative and we recommend that it should
begin as soon as some viewpoints have been identified.</p>
          <p>Once a viewpoint has been identified, some information
about the process can be collected and this may then be
used to help with the identification of further viewpoints.
1. Identify viewpoints. This is concerned with identifying
the most appropriate process perspectives that can
contribute useful information about the process and
representing these as viewpoints. As a starting point,
viewpoints covering organizational standards,
process participants, management and, where
appropriate customers should be identified. There should
be no restrictions on the numbers of viewpoints
identified at this stage.
2. Reconcile viewpoints. The focus descriptions of the
different viewpoints are used to identify viewpoints
that may be merged. Merging viewpoints is possible
when their foci overlap or are closely related. For
example, a viewpoint whose focus is software
testing may be merged with a viewpoint whose
focus is static analysis of the system to create a
general verification and validation viewpoint. Our
experience of applying a viewpoint-oriented
approach to requirements engineering [ll] suggests
that for practical reasons, the number of viewpoints
should be limited. If there are a large number of
viewpoints, the costs of information collection and
analysis become impractically high.
3.1 Viewpoint and Source Identification 3. Identi&amp; viewpoint sources. Viewpoint sources are
This stage of the process is concerned with identifying information sources that can adopt the viewpoint
relevant viewpoints and the information sources associated focus. They may be people, documents, standards,
with these viewpoints. Viewpoints and their sources are domain knowledge, etc. These are identified by
identified in an iterative way so that these activities are consultation with managers and engineers involved
interleaved. The inputs to this activity are concerns and in the process.
associated questions. These questions may either elicit The process of viewpoint identification may bring
process details, discover rationale for process activities, concerns to light that have not already been considered.
discover information about the timing, duration, and Therefore, it is sometimes necessary to revisit the previous
interdependencies of activities or the support for the stage to refine these concerns before moving on to elicit
process that is available. information about the process description.
3.2 Viewpoint Data Collection and Process 3.3 Inconsistency Analysis</p>
          <p>Description During the inconsistency analysis, the process descriptions
This stage of the process improvement process is that are encapsulated in each viewpoint are compared and
concerned with understanding, analyzing and describing reviewed by a team including process participants and
the current process that is used. We recommend an members of the organizational process improvement group.
incremental application of the steps described below fox Process inconsistencies are highlighted but no decisions
each identified viewpoint. about process modifications are made at this stage. This
The questions and process descriptions should he refined happens in a subsequent process where the concerns are
used to design process changes that contribute to the
as process information from viewpoint sources is elicited. business goals.</p>
          <p>That is, an initial set of questions to elicit process Inconsistency analysis has been shown as a separate
information is derived, viewpoint sources are consulted process stage in Fig. 4 but, in fact, much of the work actually
and a process description is proposed. This inevitably takes place during the elicitation of process information.
reveals omissions and problems with the initial set of Once a process description is available from one viewpoint,
questions. The analyst then refines the questions and it may be used as an input to the next elicitation activity.
repeats this consultation and refinement process until all During that activity, process stakeholders identify
inconviewpoints have been covered. sistencies by pointing out how their view of the process
The stages in this process are: differs from the view that is presented to them. In some
cases, where inconsistencies are a result of
misunderstandings (for example, where different terminology is used) it
may be possible for the people involved to see immediately
how to resolve the problem and the process descriptions are
changed during elicitation to remove the inconsistency. In
other cases, however, the inconsistency reflects a genuine
difference and it is documented for subsequent analysis.</p>
          <p>Inconsistencies may be identified by individuals when
they examine the different process descriptions or in a
process review meeting. In this review, a process or process
fragment is examined and discussed by the meeting
participants. Different views of the same process are
considered and inconsistencies across these views are
identified. Each of the identified inconsistencies is then
classifiedusing the categories shown in Fig. 5 . The outcome
of the review is an inconsistency report that is passed on to
the next stage of the process improvement process.</p>
          <p>Classifying process inconsistencies in this way is helpful
for making judgments about possible process
improvements. These different types of inconsistency may be used
in different ways when considering process improvements:
1. Consult process viewpoint sources. The analyst puts the
questions derived from concerns to the viewpoint
sources to discover process information. These
questions may need to he refined for the specific
viewpoint (e.g., by changing the terms used)
depending on the background of the source. As well
as the questions, of course, sources should be asked
to comment on their processes. We have found that
the best way to elicit information is to ask them to
critique an existing process description (however
inadequate this may be) that may be derived when
concerns are established. The process description
focuses the elicitation as stakeholders can point out
where it is incomplete and differs from their actual
process. Once a more detailed process description
has been elicited from one viewpoint, it may then
serve as a basis for discussion about the process in
other viewpoints.
2. Create process descriptions. A process description is
created taking into account the differences as seen by
different viewpoint sources. Any notation may he
used here to describe the process so long as it is
understandable by all people who are viewpoint
sources.
3. Analyze inconsistencies. This activity is concerned
with analyzing the process descriptions to discover
redundancy and inconsistencies. We discuss this in
more detail in Section 4.3.
4. Refine process descriptions, The results of the
inconsistency analysis are fed hack to the process sources
and, where appropriate, the process descriptions are
modified. For example, where different people use
different names for the same process, a single term
may be agreed. Where inconsistencies cannot be
reconciled, they are documented in an inconsistency
report that is an input to the next phase of the
process concerned with process improvements.</p>
          <p>This activity is also likely to reveal problems with the
identified concerns and questions. Some iteration may be
required to redefine the concerns and the associated
questions.</p>
        </sec>
        <sec id="sec-7-1-4">
          <title>Tolerable inconsistencies often reflect different profes</title>
          <p>sional judgment and we believe that good processes
allow skilled professionals to exercise that judgment.</p>
          <p>Removing tolerable inconsistencies is likely to be
demotivating for skilled professional staff. Therefore,
improvement proposals should be assessed to check
that they are not too prescriptive in defining how
professional tasks are executed.</p>
          <p>Constraining inconsistencies are inconsistencies that
must be maintained in any process improvement
proposals because they reflect local factors (such as
the use of standards) that are outside the control of the
process improvement team. Therefore, improvement
proposals should be assessedto check that they do not
inadvertently remove this type of inconsistency.</p>
          <p>Accidental inconsistencies should be resolved as part
of the process improvement.</p>
          <p>Improveable inconsistencies are pointers to differing
practices within an organization. The process
improvement team should look for the best practice
and should propose improvements that disseminate</p>
          <p>IEEE TRANSACTIONS ON SOFTWARE ENGINEERING, VOL. 25, NO.6, NOVEMBERIDECEMBER 1889
Class o f
inconsistency
Tolerable</p>
        </sec>
        <sec id="sec-7-1-5">
          <title>Constraining</title>
        </sec>
        <sec id="sec-7-1-6">
          <title>Accidental</title>
        </sec>
        <sec id="sec-7-1-7">
          <title>Improvcdble</title>
          <p>Explanation
There is an inconsistency in processes as scen Srom differentviewpoints that
does not inalerially affcct the outcomc of these processes. This type oC
inconsistency often ayises from differentjudgements madc by different
process participants.An example of this might be where different techniques
are used for object identificationand no one tcchnique is clearly supcrior.
The inconsistency in processes must he maintained because it has arisen as a
Consequenceof some external factors that are oulside the influence of thc
process improvcmenl team. For cxample, leains in Lhc same organisation
working in differentcountries may operate difference,inconsislcnt processes.
Process inconsistencies arise as a conscquence of local laws, such as health
and safely regulations, lhat must bc followed.The inconsistency therefore
constrains process cvolulion.</p>
          <p>These are process inconsislencicsthat have been introduced by accident and
that are a consequence of human mistakes and omissions. An example of
this type of inconsistency is where an activity appears i n one vicw o r a
process but where that activily has been omilted from another view where it
should have been included
These u e inconsistencieswhere differentsub-processesare used by diffennt
peoplc or in differentparls of an organisation. Some of thcsc sub-processes
may be clearly bclter than othcrs. For example, one part OF an organisation
may support thcir lesting proccss using CASE tools whereas, in other
testing processes, no automated support is used.
this good practice across the organization. They are
distinct from tolerable inconsistencies in that the
choice of practice is not a question of professional
judgment but is a consequence of lack of information
or arbitrary historical decisions.
4</p>
        </sec>
      </sec>
      <sec id="sec-7-2">
        <title>A SIMPLECASESTUDY</title>
        <p>In this section, we present part of a process analysis case
study where we applied the process viewpoint approach.</p>
        <p>The processes concerned were development and
management processes for a safety-related expert system that was
being developed by a relatively small company for a large
client. The system involved the development of a "safe"
expert system shell and the instantiation of this shell with
specific domain data. The system was to be formally
specified and the implementation validated by correctness
arguments (not a complete proof) against the specification.</p>
        <p>The company developing the system is a specialist in critical
computing systems, is technically mature and is strongly
committed to quality and quality improvement.</p>
        <p>Our aim in carrying out this case study was to evaluate
our approach in a formative way. That is, we wanted to try
it out on a real example and learn from the problems that
we encountered without prejudgment of what these
problems might be. We do not believe that summative
evaluation where a hypothesis is proposed and then
confirmed or denied is realistic in an engineering discipline.</p>
        <p>We approached the case study with an open mind about
what we would learn and how that might affect the process
viewpoints approach. We summarize some of these lessons
and some of the difficulties we faced later in this section.
4.1 Concerns and Questions
The first stage in the process analysis is to identify the
organizational concerns that contribute to the process
analysis. As this is a safety-related system, the most
important of these concerns was safety. A critical business
goal of the organization was to ensure that the systems it
developed were safe and processes always had to take this
into account. A further business concern in this particular
case was customer relationships as the customer in this case
was a large organization and a likely source of future
contracts. The final concern identified was skill utilization.</p>
        <p>The organization developing the system is very highly
skilled in a number of areas and processes had to be
designed to utilize these skills.</p>
        <p>Note that these concerns don't fall neatly into our earlier
classification of understanding, improvement, or constraint
concerns. For example, safety is both an improvement
concern and a constraint. The organization wishes to
develop a safer process where fewer product defects are
introduced but also constrains any process improvements
to be such that the safety of the process is not impaired.</p>
        <p>To illustrate question derivation, let us consider the safety
concern. Some relevant process questions associated with
this concern are:
1. Is there an independent validation activity for each</p>
        <p>of the outputs of the processes?
2. Have adequate resources been assigned to each</p>
        <p>validation activity?
3. How are identified hazards tracked at each stage in
the process?
SOMMERVILLE ET AL.' MANAGING PROCESS INCONSISTENCYUSING VIEWPOINTS
4. Are the processes conformant with the safety plan these are not always ideal; they 'may not allow complete
agreed with the customer? coverage of a method and they may have to be carried out
5. Are descriptions of the system in different notations to a very tight schedule. However, we argue that they are
checked for consistency? inevitably useful in some respects and are more valuable
By applying these questions to process sources, we built than academic examples that don't capture the messy
up a model of the process as seen by different process reality of industrial software development.
viewpoints.
4.2</p>
      </sec>
    </sec>
    <sec id="sec-8">
      <title>Viewpoint Identification</title>
      <p>The next stage of the process of analysis is to 'identify
relevant viewpoints. The process we recommend involves
identifying as many viewpoints as possible then merging
these to reduce the number of viewpoints for analysis. In
this case, we will skip the first stage and simply discuss the
final viewpoints used in the analysis. Three viewpoints
were identified as significant in this case:
e A project management viewpoint</p>
      <p>A qnality management viewpoint
e An engineering viewpoint</p>
      <p>The scope of each of these viewpoints is defined by
describing their focus. All viewpoints are concerned with
the whole of the development process for the system so this
need not be explicitly set out in the viewpoint focus
descriptions:
1. Project management. The project management
viewpoint is concerned with the process as defined by
those activities that are identified in the project plan
and that are assigned specific resources and a
schedule for completion.
2. Quality management. The quality management
viewpoint is concerned with those aspects of the process
where the customer requires explicit evidence of
validation activities and the conformance of process
deliverables to requirements and standards.
3. Engineering. The engineering viewpoint is concerned
with the process that is actually enacted by the
engineers involved in the system development.</p>
      <p>In conjunction with the process of viewpoint
identification, sources of information associated with the viewpoint
should also be identified. The focus description may be
used as a starting point for identifying information sources.
In this case, once one source was identified, he helped in the
identification of other possible sources.</p>
      <p>For brevity, we will focus the remainder of this
discussion on the first two viewpoints above namely quality
management and project management. Sources of information
associated with these viewpoints are:
e project management: project plan, project manager,
customer project manager, software developers
quality management: project quality plan,
organizational quality manual, quality manager, customer
project manager</p>
      <p>In practice, it is not always possible to get access to all
sources. In this particular case, we had close links with the
development organization but no access to their customer.
We were therefore unable to get any information from
customer-based sources. This illustrates a general problem
with industrial case studies. External factors mean that
4.3</p>
    </sec>
    <sec id="sec-9">
      <title>Process Description</title>
      <p>Once the sources have been identified, they are consulted
and a process description is developed. The principal
source for the project management and quality
management viewpoints was the very comprehensive process
documentation that had been produced to satisfy the
quality requirements of the customer. The questions which
were derived from the concerns were used to elicit process
details from this documentation and from the people
involved in the process.</p>
      <p>From the project management viewpoint, resources and
schedules had been drawn up for 21 activities; from the
quality management viewpoint, 36 explicit validation
activities were identified. In each of these cases, there were
logical groupings of activities so it was relatively
straightforward to produce a more abstract model of the process.</p>
      <p>This high-level project management model is shown in
Fig. 6. Again, the dotted arrows mean temporal sequence
where a destination activity may start but may not finish
before the source activity has finished. Where activities are
vertically aligned, this means that they may (but need not)
be carried out in parallel.</p>
      <p>From the quality management perspective, the high-level
model focused on validation activities. This model is
illustrated in Fig. 7.</p>
      <p>Because of the safety-related nature of this project,
auditable validation of all process deliverables is essential.
Therefore, for model consistency, we should look for a 1:l
relationship between project management activities and
validation activities. If there are validation activities that do
not appear in the project management model, this implies
that these have not been allocated project resources.</p>
      <p>Bearing this in mind, a comparison of Figs. 6 and 7
reveals two inconsistencies:
1. The project management model has an activity
"acceptance testing" that does not appear in the
quality management process. This is a tolerable
inconsistency as the responsibility for validating the
acceptance test lies with the customer for the
software. The developer, therefore, need not assign
resources to this activity.
2. The quality management model includes an activity
"safety plan review" that is not included in the project
management model. This is an accidental inconsistency
that highlights an error in the project management
view of the process. In practice, the inconsistency
could be resolved by adding a subactivityto
"technology assessment" that was concerned with preparing
inputs for use in the project.</p>
      <p>Further inconsistency analysis requires a more detailed
look at the process. Let us look at the processes, inputs and
outputs for the shell specification activity shown in Fig. 6.
This more detailed model is shown in Fig. 8. Solid arrows</p>
    </sec>
    <sec id="sec-10">
      <title>4.4 Inconsistency Analysis</title>
      <p>In analyzing these more detailed models for inconsistency,
we put the process descriptionsfromthequalitymanagement
and the projectmanagement viewpoints side-by-sideand ask
a number of questions motivated by the concerns and their
associated questions. Examples of these questions are:
1. What is the correspondence between tasks for which
resources have been allocated and identified
validation activities? That is, is it possible to equate,
perhaps by name similarity, the activities in the
different viewpoints.
2. Are there any mismatches in the process
descriptions such as development activities with no
corresponding validation activity or validation
activities with no allocated resources?
3. Does the process description in the project
management viewpoint clearly identify the deliverables that
must be validated to ensure compliance with the
project safety plan?
4. Is the identification of outputs in the project
management viewpoint consistent with the
identification of process inputs in the quality management
viewpoint?</p>
      <p>When we examined the process descriptions in the
project management and process management viewpoint
and put these questions to the models, we found
inconsistenciesin the process. From the process fragments shown
linking boxes indicate data-flows. The System S E is a in Figs. 8 and 9 we can see that, in the project management
software requirements statement, written in English, that view, there are three validation activities in the process
was produced by the customer for the system. (activities 2, 3, and 5 ) . Somehow, these must map onto the</p>
      <p>The comparable quality management model that identi- six activities identified in the quality management view of
fies validation activities, inputs and outputs is shown in the process. When we looked at the processes in detail
Fig. 9. In this process, each validation activity produces a using the above questions, we found three inconsistencies:
report and has a set of associated success criteria. These are
not really inputs to the next stage (the inputs to validation
are outputs from development activities) so they are not
included as data-flows on this diagram.</p>
      <p>specification ~
. implementation</p>
      <p>4
1. The quality management view requires a static
analysis of the formal specification (activity 1)that
is not explicit in the project management view. This
is probably an accidental inconsistency resulting
from a failure in communicationbetween the project
manager and the quality manager. However, it could
be an improveable inconsistency. If the, project
manager and the quality manager are from different
backgrounds, then the project manager may not be
aware of the benefits of static analysis.
2. There is no activity in the project management
model where test planning is explicit and the test
plan is not specified as an output of any activity.It is,
however, an input to validation activities 4 and 5
that review the plan. As there are two test plan
reviews, it is clear that, from a quality management
viewpoint, significant effort should be devoted to
test planning. This is probably an accidental
inconsistency that suggests that the project management
view of the process should be modified to include a
test planning activity.
3. The quality management viewpoint identifies inputs
as "revised formal spec," but it is not clear which
version of these inputs should be used. That is, the
project management model assumes a number of
revisions of this specification (identified in the
process as V1, V2, V3, and V4) but the quality
management viewpoint does not explicitly state
which of these are inputs to which validation
activity. This is an accidental inconsistency that
suggests that the quality management process
description should be modified to include explicit
version identification.</p>
      <sec id="sec-10-1">
        <title>4.5 Lessons Learned</title>
        <p>Applying the approach to a real industrial case study was
very helpful. The nature of this case study was such that it
did not allow all aspects of the process viewpoint approach</p>
        <p>The process of process analysis is continued for the other to be evaluated but we gained very useful feedback
process fragments associated with the activities identified in particularly on the application of the approach to process
Fig. 6 and Fig. 7. We will not show this here as it simply
involves applying the same process as we have described analysis. Some lessons that we learned were:
for the shell specification. Overall, we identified a total of 14
inconsistencies between the processes as seen from the
project management and quality management perspective.</p>
        <p>Of these, two were tolerable inconsistencies and the
remainder were either accidental or improveable
inconsistencies. We did not find any constraining inconsistencies.</p>
        <p>
          This was not surprising as we expect this type of
inconsistency to arise when comparable processes in
different parts of an organization are compared.
1. Even in the relatively simple processes studied here,
there were a significant number of process
inconsistencies and structuring the process analysis using
viewpoints was a helpful way of discovering these
inconsistencies.
2. The distinction between the types of inconsistency
that we proposed in Fig. 5 is not as clear cnt as we
anticipated. It was helpful to identify inconsistencies
but, in this particular study, it was sometimesunclear
whether these inconsistencies were accidental i.e., a
result of process errors or misunderstandings or
improveable i.e., a result of one view being unaware
of better practice that is part of a different view. It is
perhaps the case that making a distinction between
types of inconsistency is irrelevant. Further work is views. This work has continued with a newer version of
clearly needed to determine if firstly, inconsistency the language MVP-L 2 now available [
          <xref ref-type="bibr" rid="ref25">27</xref>
          ]. MVP-L has a
classification is useful and, secondly, if the classifica- fixed set of views namely a product view, a process view
tions discussed here are the right ones. and a resource view. It therefore provides an integrated
3. Our original notion that processes may be described, mechanism to define different representations of a process
within a viewpoint, using any notation was a valid and its supporting environment MVP-E [
          <xref ref-type="bibr" rid="ref26">28</xref>
          ]supports some
one. For example, from a project management consistency checking across these representations. Our
viewpoint, processes were described using bar notion of viewpoints is really quite different from that in
charts and from a quality management viewpoint MVP-L and reflects the process as seen by different
they were described using narrative text. However, stakeholders. We are not concerned with cross-checking
we quickly realized that we needed some common different representations of the process that are derived
notation to make effective comparisons of processes from the same source.
and we redescribed the processes using the simple Verlage [29], in work related to MVP-L, confirms the
graphical notation that we have used here. need for a multiple perspective approach to process
4. The tool support requirements for the approach are modeling and presents a set of requirements for this
relatively simple. Tool support would have been approach. He suggests the following key requirements:
helpful in translating the elicited process
descriptions into a common format and comparing these 1. different perspectives on the same process element
descriptions. We used a graphical editor for this but must be offered
specialized tool support that would have allowed us 2. tailorable (user-defined) perspectives
to explicitly link processes in different viewpoints 3. structuring of views
that had different names would have been helpful. 4. independent modeling of views
5. The identification of concerns was a very useful step 5 . detecting similarities between views
in the process as it helped us understand the 6. detecting inconsistencies between views.
priorities of the process “owners.” The questions 7. dynamic change of perspectives
derived from concerns were useful because they 8. concurrent views-different views for different
helped us to get started with the process analysis. people
However, it wasn’t sensible to stick with our pre- We believe that this is a helpful list of requirements and
prepared list of questions as it quickly became clear we return to it in the conclusions of the paper where we
that some of them were irrelevant to some of the assess our process viewpoints approach against it.
sources of process information. However, the fact Bandinelli et al. [30],[31] discuss an experiment where
that we did not see proposed process improvements they used a formal process modeling language to help
meant that we could not validate our notion that discover process inconsistencies across different views of a
concerns could be used to check that proposed process. This paper is an interesting illustration of the belief
improvements were conformant with business goals. of processes as descriptions of how work should be done as
6. Inconsistency analysis often raised further questions discussed in Section 1.1.The authors identify five different
about the process. If we consider the example of the views of a software process:
static analysis inconsistency discussed above, further
issues came to light. It is not clear whether or not the
specification should ”pass” the static analysis with
no significant errors or how the results of the static
analysis are used in the internal consistency check of
the specification. Nor is it clear if the static analysis
revort is delivered to the customer or not.
        </p>
        <p>The essential lesson that we learned from the case study
was the need for flexibility. The fundamental framework
that we have described here was helpful but when we tried
to realize it in a practical context, we had to be opportunistic
about what information could be collected and when it was
collected. It wasn’t really possible to separate the activities
of viewpoint and source identification and sources
sometimes pointed out process inconsistencies before actually
describing the process used.
1. the desired view, which is the process that the</p>
        <p>organization really wants
2. the ojjcicial view, which is the process that has been</p>
        <p>documented
3. the perceived view, which is the process that different</p>
        <p>actors think has been documented
4. the observed view, which is what observers
examin</p>
        <p>ing the process see happening
5. the actual view, which is the process actually</p>
        <p>followed by process actors</p>
        <p>The objective of the process analysis was to increase the
conformity of the official and desired process, improve the
specification of the official process, and move the actual
process closer to the officially defined process. This work
discovered a number of process inconsistencies and, in
particular, identified a number of problems in the
description of the ”official” process. Clearly, the use of different
5 RELATEDWORK views was helpful in focusing the inconsistency analysis
and the authors were committed to the use of formal
The earliest work that we are aware of that has taken a process modeling to support the analysis.
multiperspective approach to process modeling was carried The paper shows that formal modeling of processes can
out by Rombach in the late ’80s. He developed MVP-L [26], be used to discover inconsistencies but it neither claims nor
a process modeling language that supported multiple demonstrates that this is a cost-effective approach to
SOMMERVILLE ET AL.: MANAGING PROCESS INCONSISTENCY USING VIEWPOINTS
Requirement
Different perspectives on the
same process element must be
offered
Tailorable (user-defined)
erspectives
tructuring of views</p>
        <sec id="sec-10-1-1">
          <title>Independent modelling of views Detecting similarities between views</title>
        </sec>
        <sec id="sec-10-1-2">
          <title>Detecting inconsistencies between views Dynamic change of perspectives</title>
        </sec>
        <sec id="sec-10-1-3">
          <title>Concurrent views - different views for different people.</title>
          <p>Assessment
A fundamental feature of our approach
A fundamental reature of our a_p_proach
The requirement suggests that process elements should
be explicitly grouped to form a view. Our notion of
focus would appear to support this although it is not
entirely clear to us what the requirement means.
As suggested, correspondence of views is established
after their description
No automated support. This requirement and the
requirements for incoiisistcncy detection is partially
supported through a suggested process for using process
viewpoints
No automated support.</p>
          <p>This suggests that it must be possible for the same actor
to view a process differcntly in different situations. This
is supported by defining different viewpoints but with
common sources of viewpoint information.</p>
          <p>This is supported by allowing flexibility in the notations
used to describe processes.</p>
          <p>Flg. IO. Assessment of process viewpoints
inconsistency analysis. The paper does not discuss whether
the formal models were used directly with the process
owner and process agents or if these were paraphrased for
discussions with them about the process. Their informal
process views are sensible but we believe that there are
likely to be many actual processes (corresponding to
different process actors) and, perhaps, several official
processes (documented in different places) and that this
cannot be accommodated in a predefined set of viewpoints.</p>
          <p>
            Turgeon and Madhavji have also developed a multiview
approach to elicitation with some automated consistency
checking. This is based on their work on process elicitation
and the methodological and tool support that has been
developed for this. Their original Elicit approach [
            <xref ref-type="bibr" rid="ref30">32</xref>
            ], [33]
supported the notion of multiple views to manage different
representations of processes such as an activity view, a
resource view, etc. More recently, they discuss [34]the need
for role-driven views for process modeling. This work is
still under development but they are also taking a
languagebased approach to inconsistency detection and offer some
support for automated detection of inconsistencies in a
formal process model.
          </p>
          <p>Of all other research in this field, this is the closest to the
work we have reported here. We share the notion that
views can be associated with roles and that there may be
specific models (Turgeon and Madhavji use the term
"aspect" here) associated with a view. Our notion of a
viewpoint is a more general one. We do not constrain
viewpoints to be associated with roles (although this is
certainly the most common type of process viewpoint) and
the use of concerns and associated questions provides a
starting point for the elicitation process. We are not
concerned with automated inconsistency checking so work
with a more flexible notion of inconsistency that can
encompass inconsistencies derived from human and
organizational factors.</p>
          <p>Our work has also been influenced by a body of work
that has been concerned with inconsistency management
across viewpoints in requirements engineering [35], [36].
The goal of this work is to provide a framework for
allowing potentially inconsistent requirements to coexist
and to help discover those inconsistencies. This relies on
automatic or semiautomatic analysis of formal process
descriptions to discover inconsistencies across viewpoints
[37]. This work has been successful for small-scale
requirements analysis but the difficulties of creating formal
descriptions of requirements and in reconciling functional
and nonfunctional requirements inconsistencies mean that
it is a major challenge to scale the approach for industrial
systems.
6</p>
        </sec>
      </sec>
      <sec id="sec-10-2">
        <title>CONCLUSIONS</title>
        <p>This paper has described an approach to process analysis
and improvement based on viewpoints where each
viewpoint manages a distinct process perspective. It allows
inconsistent models of processes to be managed and
provides a framework for analyzing the inconsistencies
with a view to subsequent process improvement. Fig. 10 is
an assessment of our work against the requirements for
multiview modeling of software processes identified by
Verlage [29]. This demonstrates that there is a substantial
correspondence between our process viewpoints and the
identified requirements.</p>
        <p>All our work was strongly influenced by practical
industrial requirements. Consequently, we have designed
process viewpoints to be a flexible approach to process
analysis that does not require users to take the risk of
committing themselves to new, specialized notations. The
case study described here demonstrated that it was realistic to
apply our approach to real industrial processes, although we
must admit that this was a relatively small project with a
limited number of stakeholders.It did not exercise all aspects
of our approach to process analysis,but the results suggested
that there was some merit at least in using viewpoints when
tryingto understand and improve processes. We do not yet
h o w how the approach will scale up to the processesused in
large software engineering projects.</p>
      </sec>
      <sec id="sec-10-3">
        <title>ACKNOWLEDGMENTS</title>
        <p>The work described in this paper was partially supported
by the European Commission's ESPRIT programme under
project REAIMS (8649). Particular thanks are due to Robin
Bloomfield at Adelard for case study information.
t
i
~
~
~</p>
        <p>Pete Sawyer holds BSc and PhD degrees in
computer science from Lancaster University.</p>
        <p>He is a senior lecturer in the Computing
Department at Lancaster University, where he
has held a variety of positions since 1986. His
principal research interests are in requirements
engineering, dependable systems, and software
process improvement. He is a member of the
iEEE Computer Society and the ACM.</p>
      </sec>
    </sec>
  </body>
  <back>
    <ref-list>
      <ref id="ref1">
        <mixed-citation>
          [1]
          <string-name>
            <given-names>A.</given-names>
            <surname>Finkelstein</surname>
          </string-name>
          ,
          <string-name>
            <given-names>J.</given-names>
            <surname>Kramer</surname>
          </string-name>
          , and
          <string-name>
            <given-names>B.</given-names>
            <surname>Nuseibeh</surname>
          </string-name>
          , cds.,
          <source>Software Process Modelling and Technology</source>
          , Taunton, Somerset, England: Research Studies Press Ltd.,
          <year>1994</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref2">
        <mixed-citation>
          [Z]
          <string-name>
            <given-names>A.</given-names>
            <surname>Fuggetta</surname>
          </string-name>
          and
          <string-name>
            <surname>A</surname>
          </string-name>
          . Wolf, eds.,
          <source>Trends in Software: Software Process</source>
          . Chichester, U.K.:John Wiley &amp; Sons,
          <year>1996</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref3">
        <mixed-citation>
          [3]
          <string-name>
            <given-names>M.</given-names>
            <surname>Hammer</surname>
          </string-name>
          ,
          <article-title>"Reengineering Work: Don't Automate, Obliterate,"</article-title>
          <source>Harvard Bitsiness Review</source>
          , pp.
          <fpage>104</fpage>
          -
          <lpage>112</lpage>
          , July/Aug.
          <year>1990</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref4">
        <mixed-citation>
          [4]
          <string-name>
            <given-names>W.S.</given-names>
            <surname>Humphrey</surname>
          </string-name>
          ,
          <article-title>"Characterizing the Software Process,"</article-title>
          <source>IEEE Software</source>
          , vol.
          <volume>5</volume>
          , no.
          <issue>2</issue>
          , pp.
          <fpage>73</fpage>
          -
          <lpage>79</lpage>
          ,
          <year>1988</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref5">
        <mixed-citation>
          [5]
          <string-name>
            <surname>M.C. Pauik B. Curtis</surname>
            ,
            <given-names>M.B.</given-names>
          </string-name>
          <string-name>
            <surname>Cbrissis</surname>
            , and
            <given-names>C.V.</given-names>
          </string-name>
          <string-name>
            <surname>Weber</surname>
          </string-name>
          ,
          <article-title>"</article-title>
          <source>Capability Mahlrity Model, version 1.1," IEEE Software</source>
          , vol.
          <volume>10</volume>
          , no.
          <issue>4</issue>
          , pp.
          <fpage>18</fpage>
          -
          <lpage>27</lpage>
          .
          <year>1993</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref6">
        <mixed-citation>
          [6]
          <string-name>
            <given-names>V.</given-names>
            <surname>Haase</surname>
          </string-name>
          ,
          <string-name>
            <given-names>R.</given-names>
            <surname>Messnarz</surname>
          </string-name>
          ,
          <string-name>
            <given-names>C.</given-names>
            <surname>Koch</surname>
          </string-name>
          ,
          <string-name>
            <given-names>H.J.</given-names>
            <surname>Kugler</surname>
          </string-name>
          , and
          <string-name>
            <given-names>P.</given-names>
            <surname>Decrinis</surname>
          </string-name>
          ,
          <article-title>"Bootstrap: Fine Tuning Process Assessment,"</article-title>
          <source>IEEE Software</source>
          , vol.
          <volume>11</volume>
          , no.
          <issue>4</issue>
          , pp.
          <fpage>25</fpage>
          -
          <lpage>35</lpage>
          ,
          <year>1994</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref7">
        <mixed-citation>
          [7]
          <string-name>
            <given-names>K.</given-names>
            <surname>El Emam</surname>
          </string-name>
          ,
          <string-name>
            <given-names>J.</given-names>
            <surname>Drouin</surname>
          </string-name>
          , and
          <string-name>
            <given-names>M.</given-names>
            <surname>Welo</surname>
          </string-name>
          ,
          <source>SPICE: The Theory and Practice of Software Process Improvement and Capability Determinntion</source>
          . Los Alamitos, Calif.: IEEE CS Press.
          <year>1997</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref8">
        <mixed-citation>
          <string-name>
            <given-names>I.</given-names>
            <surname>Sommerville</surname>
          </string-name>
          and
          <string-name>
            <given-names>P.</given-names>
            <surname>Sawyer</surname>
          </string-name>
          , Requirements Engineering:
          <string-name>
            <given-names>A Good</given-names>
            <surname>Practice Guide. Chichester U.K.: John</surname>
          </string-name>
          Wiley &amp; Sons,
          <year>1997</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref9">
        <mixed-citation>
          <string-name>
            <given-names>L.</given-names>
            <surname>Emmet</surname>
          </string-name>
          ,
          <string-name>
            <given-names>R.</given-names>
            <surname>Bloomfield</surname>
          </string-name>
          , J. Bowers, 'and
          <string-name>
            <given-names>S.</given-names>
            <surname>Viller</surname>
          </string-name>
          ,
          <article-title>"PERE Evaluation and Improvement of Dependable Processes,"</article-title>
          <source>Proc. Safecomp'96</source>
          ,
          <year>1996</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref10">
        <mixed-citation>
          <string-name>
            <given-names>I.</given-names>
            <surname>Sammerville</surname>
          </string-name>
          and
          <string-name>
            <given-names>P.</given-names>
            <surname>Sawyer</surname>
          </string-name>
          ,
          <article-title>"Viewpoints: Principles, Problems and a Practical Approach to Requirements Engineering," Annunl Software Eng</article-title>
          ., vol.
          <volume>3</volume>
          ,
          <year>1997</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref11">
        <mixed-citation>
          <string-name>
            <given-names>I.</given-names>
            <surname>Sommerville</surname>
          </string-name>
          ,
          <string-name>
            <given-names>P.</given-names>
            <surname>Sawyer</surname>
          </string-name>
          , and
          <string-name>
            <given-names>S.</given-names>
            <surname>Viller</surname>
          </string-name>
          ,
          <article-title>"Viewpoints for Requirements Elicitation: A Practical Approach,"</article-title>
          <source>Proc. Int'l Conf Reauiremcets E n c</source>
          .
          <volume>19911</volume>
          .
        </mixed-citation>
      </ref>
      <ref id="ref12">
        <mixed-citation>
          <string-name>
            <surname>Proc. Second Int'l Conf</surname>
          </string-name>
          .
          <source>Software Proccss;l993.</source>
        </mixed-citation>
      </ref>
      <ref id="ref13">
        <mixed-citation>
          <string-name>
            <given-names>S.M.</given-names>
            <surname>Sutton</surname>
          </string-name>
          and
          <string-name>
            <given-names>L.J.</given-names>
            <surname>Osterweil</surname>
          </string-name>
          ,
          <article-title>"The Design of a Next-Generation Process Language,"</article-title>
          <source>ESEC/FSE'97</source>
          , pp.
          <fpage>142</fpage>
          -
          <lpage>58</lpage>
          , Springer-Verlag,
          <year>1997</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref14">
        <mixed-citation>
          <string-name>
            <surname>M.C. Paulk</surname>
            .
            <given-names>C.V.</given-names>
          </string-name>
          <string-name>
            <surname>Weber</surname>
            .
            <given-names>B.</given-names>
          </string-name>
          <string-name>
            <surname>Curtis</surname>
            . and
            <given-names>M.B.</given-names>
          </string-name>
          <string-name>
            <surname>Chrissis. TJrt Capability Maturity</surname>
          </string-name>
          <article-title>Model:' Guidelines,for Improving~the S o ~ w a ~ e Process</article-title>
          . Reading, Mass.:
          <string-name>
            <surname>Addison-Wesley</surname>
          </string-name>
          ,
          <year>1995</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref15">
        <mixed-citation>
          <string-name>
            <given-names>I.</given-names>
            <surname>Sommerville</surname>
          </string-name>
          and
          <string-name>
            <given-names>T.</given-names>
            <surname>Radden</surname>
          </string-name>
          ,
          <article-title>"Human, Social and Organizational Influences on the Software Process," Trends in Software, A. Fuggetta and A</article-title>
          . Wolf, eds., p..p.
          <fpage>89</fpage>
          -
          <lpage>110</lpage>
          , New York Tohn Wiley &amp; Sons,
          <year>1996</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref16">
        <mixed-citation>
          <string-name>
            <given-names>G.</given-names>
            <surname>Cugola</surname>
          </string-name>
          ,
          <string-name>
            <given-names>E. Di</given-names>
            <surname>Nitto</surname>
          </string-name>
          ,
          <string-name>
            <given-names>A.</given-names>
            <surname>Fuggetta</surname>
          </string-name>
          , and
          <string-name>
            <given-names>C.</given-names>
            <surname>Ghezzi</surname>
          </string-name>
          ,
          <article-title>"A Framework for Formalizin~Inconsistencies and ~ ~ ~in i Human-Centered Systems,"</article-title>
          <source>ACM Trans. Software Eng. and Methodology</source>
          , vol.
          <volume>5</volume>
          , no.
          <issue>3</issue>
          , pp.
          <fpage>191</fpage>
          -
          <lpage>230</lpage>
          ,
          <year>1996</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref17">
        <mixed-citation>
          [18]
          <string-name>
            <given-names>R.</given-names>
            <surname>Conradi</surname>
          </string-name>
          and
          <string-name>
            <given-names>C.</given-names>
            <surname>Liu</surname>
          </string-name>
          ,
          <article-title>"Process Modelling Languages: One or Many,"</article-title>
          <source>Proc. Fourth European Workshop Softw&amp; Pr&amp;essTechnology</source>
          , Springer-Verlag,
          <year>1995</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref18">
        <mixed-citation>
          <string-name>
            <surname>[I91 P. Checkland</surname>
          </string-name>
          , Systems Thinking, Systems Prnctice. Chichester U.K.: John Wiley &amp; Sons,
          <year>1981</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref19">
        <mixed-citation>
          [201
          <string-name>
            <given-names>G.</given-names>
            <surname>Mullery</surname>
          </string-name>
          ,
          <article-title>"CORE-A Method for Controlled Requirements Specification,"</article-title>
          <source>Proc. Fourth Int'l Conf. Software Eng</source>
          ., pp.
          <fpage>126</fpage>
          -
          <lpage>35</lpage>
          , IEEE CS Press.
          <year>1979</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref20">
        <mixed-citation>
          [22]
          <string-name>
            <surname>G.</surname>
          </string-name>
          <article-title>Kotonya and 1</article-title>
          .
          <string-name>
            <surname>Sommerville</surname>
          </string-name>
          ,
          <article-title>"Requirements Engineering with Viewpoints,"</article-title>
          <source>BCSIIEE Software Eng. I,</source>
          , vol.
          <volume>11</volume>
          ,no.
          <issue>1</issue>
          , pp.
          <fpage>5</fpage>
          -
          <lpage>18</lpage>
          ,
          <year>1996</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref21">
        <mixed-citation>
          [23]
          <string-name>
            <given-names>I.</given-names>
            <surname>Sommerville</surname>
          </string-name>
          ,
          <string-name>
            <given-names>P. Sawyer G.</given-names>
            <surname>Kotonyu</surname>
          </string-name>
          , and
          <string-name>
            <given-names>S.</given-names>
            <surname>Viller</surname>
          </string-name>
          ,
          <article-title>"Process Viewpoints,"</article-title>
          <source>Proc. Fifth European Workshop Software Process Technology</source>
          , Springer-Verlsg,
          <year>1995</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref22">
        <mixed-citation>
          [24]
          <string-name>
            <given-names>V.R.</given-names>
            <surname>Basili</surname>
          </string-name>
          and
          <string-name>
            <given-names>H.D.</given-names>
            <surname>Rombach</surname>
          </string-name>
          ,
          <article-title>"The TAME Project: Towards Improvement-Oriented Software Environments,"</article-title>
          <source>IEEE Trans. Software Eng.</source>
          , vol.
          <volume>14</volume>
          , no.
          <issue>6</issue>
          , pp.
          <fpage>758</fpage>
          -
          <lpage>773</lpage>
          ,
          <year>June 1988</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref23">
        <mixed-citation>
          [25]
          <string-name>
            <given-names>P.</given-names>
            <surname>Checkland</surname>
          </string-name>
          and
          <string-name>
            <given-names>J.</given-names>
            <surname>Scholes</surname>
          </string-name>
          , Soft Systems Methodology in Action. Chichester U.K.: John Wiley &amp; Sons,
          <year>1990</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref24">
        <mixed-citation>
          <string-name>
            <surname>[261 H.D. Rombach</surname>
          </string-name>
          ,
          <article-title>"MVP-L, A Language for Process Modeling Inthe-Large," Inst. for Advanced Computer Studies</article-title>
          , Univ. of Maryland,
          <year>1991</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref25">
        <mixed-citation>
          [27]
          <string-name>
            <given-names>A.</given-names>
            <surname>Brockers</surname>
          </string-name>
          ,
          <string-name>
            <given-names>C.M.</given-names>
            <surname>Lott</surname>
          </string-name>
          ,
          <string-name>
            <given-names>H.D.</given-names>
            <surname>Rombach</surname>
          </string-name>
          , and
          <string-name>
            <given-names>M.</given-names>
            <surname>Verlage</surname>
          </string-name>
          , "
          <string-name>
            <surname>MVP-L Language Report</surname>
          </string-name>
          , version
          <volume>2</volume>
          ," Dept. of Computer Science, Univ. of Kaiserslautern, Germany,
          <year>1995</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref26">
        <mixed-citation>
          [28]
          <string-name>
            <given-names>U.</given-names>
            <surname>Becker</surname>
          </string-name>
          , D. Hamann, J. Miinch, and
          <string-name>
            <given-names>M.</given-names>
            <surname>Verlage</surname>
          </string-name>
          , "
          <string-name>
            <surname>MVP-E A Process Modeling</surname>
          </string-name>
          <article-title>Environment"</article-title>
          IEEE Trans.
          <source>Computer Software Enr. So,ftware Process Newsletter</source>
          . vol.
          <volume>10</volume>
          .
          <string-name>
            <surname>ID</surname>
          </string-name>
          .D.
          <volume>10</volume>
          -
          <fpage>15</fpage>
          .
          <year>1997</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref27">
        <mixed-citation>
          <article-title>~ 9 1M. Verlage, "Multi-View Modeling of Software Processes,"</article-title>
          <source>Proc. Third Europeas Workshop Software Process Technology, SpringerVerlag</source>
          , pp.
          <fpage>123</fpage>
          -
          <lpage>127</lpage>
          ,
          <year>1994</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref28">
        <mixed-citation>
          ~301S.
          <string-name>
            <surname>Bandinelli</surname>
            ,
            <given-names>A. Fuggetta L.</given-names>
          </string-name>
          <string-name>
            <surname>Lavazza</surname>
            ,
            <given-names>M.</given-names>
          </string-name>
          <string-name>
            <surname>Loi</surname>
            , and
            <given-names>G.P.</given-names>
          </string-name>
          <string-name>
            <surname>Picco</surname>
          </string-name>
          ,
          <article-title>"Modeling and Improving an Industrial Software Process,"</article-title>
          <source>IEEE Trans. Software Eng.</source>
          , vol.
          <volume>21</volume>
          , no.
          <issue>5</issue>
          , pp.
          <fpage>440</fpage>
          -
          <lpage>454</lpage>
          , May
          <year>1995</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref29">
        <mixed-citation>
          ~311S.
          <string-name>
            <surname>Bmdinelli</surname>
            ,
            <given-names>A.</given-names>
          </string-name>
          <string-name>
            <surname>Fuggetta</surname>
            , and
            <given-names>C.</given-names>
          </string-name>
          <string-name>
            <surname>Gherzi</surname>
          </string-name>
          ,
          <article-title>"Software Process Evolution in the SPADE Environment,"</article-title>
          <source>IEEE Trans. Software EIIY.</source>
          , vol.
          <volume>19</volume>
          , no.
          <issue>12</issue>
          , pp.
          <volume>1</volume>
          ,
          <issue>128</issue>
          -
          <fpage>1</fpage>
          ,
          <issue>144</issue>
          ,
          <year>1993</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref30">
        <mixed-citation>
          [32]
          <string-name>
            <given-names>N.H.</given-names>
            <surname>Madhevii</surname>
          </string-name>
          .
          <string-name>
            <given-names>D.</given-names>
            <surname>Holtie. H. WonKook</surname>
          </string-name>
          . and
          <string-name>
            <surname>T. Bruckhaus</surname>
          </string-name>
          "Elicit: [341
          <string-name>
            <given-names>J.</given-names>
            <surname>Turgeon</surname>
          </string-name>
          and
          <string-name>
            <surname>N.H.</surname>
          </string-name>
          <article-title>M a d h a j i , "A Systematic View-Based Approach to Eliciting Process Models,"</article-title>
          <source>Proc. Fifth Euopean Workshop Software Process Technology</source>
          ,Springer-Verlag,
          <year>1996</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref31">
        <mixed-citation>
          [351
          <string-name>
            <given-names>A.</given-names>
            <surname>Finkelstein</surname>
          </string-name>
          ,
          <string-name>
            <given-names>J</given-names>
            ,
            <surname>Kramer</surname>
          </string-name>
          ,
          <string-name>
            <given-names>B.</given-names>
            <surname>Nuseibeh</surname>
          </string-name>
          , and
          <string-name>
            <given-names>M.</given-names>
            <surname>Goedicke</surname>
          </string-name>
          ,
          <article-title>"Viewpoints: A Framework for Integrating Multiple Perspectives in System Development,"</article-title>
          <source>Int'l 1</source>
          .
          <string-name>
            <given-names>Software</given-names>
            <surname>Eng</surname>
          </string-name>
          . and
          <string-name>
            <given-names>Knowledge</given-names>
            <surname>Eng</surname>
          </string-name>
          ., vol.
          <volume>2</volume>
          , no.
          <issue>1</issue>
          , pp.
          <fpage>31</fpage>
          -
          <lpage>58</lpage>
          ,
          <year>1992</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref32">
        <mixed-citation>
          <string-name>
            <given-names>B.</given-names>
            <surname>Nuseibeh</surname>
          </string-name>
          ,
          <string-name>
            <given-names>J.</given-names>
            <surname>Kramer</surname>
          </string-name>
          , and
          <string-name>
            <given-names>A</given-names>
            ,
            <surname>Finkelstein</surname>
          </string-name>
          ,
          <article-title>"A Framework for Expressing the Relationships between Multiple Views in Requirements Specifications,"</article-title>
          <source>IEEE Tmns. Software Eng.</source>
          , vol.
          <volume>20</volume>
          , no.
          <issue>10</issue>
          , pp.
          <fpage>760</fpage>
          -
          <lpage>773</lpage>
          , Oct.
          <year>1994</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref33">
        <mixed-citation>
          <string-name>
            <given-names>S.</given-names>
            <surname>Easterbrook</surname>
          </string-name>
          and
          <string-name>
            <given-names>B.</given-names>
            <surname>Nuseibeh</surname>
          </string-name>
          .
          <article-title>"Usine Viewpoints for Inconsistency Management," BCS/IEE Soft&amp;</article-title>
          &amp;
          <string-name>
            <surname>Eng</surname>
          </string-name>
          . J ,
          <year>v61</year>
          . 11, no.
          <issue>1</issue>
          , pp,
          <fpage>31</fpage>
          -
          <lpage>43</lpage>
          ,
          <year>1996</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref34">
        <mixed-citation>
          <article-title>Ian Sommerville received a BSc degree in physics from Strathclyde University and the MSc and PhD degrees from St</article-title>
          . Andrews University, Scotland.
          <article-title>He is a professor of computer science and chair of the Computing Department</article-title>
          at Lancaster University.
          <article-title>He has been involved in software engineering research and teaching for the past 20 years and his current research interests are in requirements engineering, system evolution. and human and social factors in Svstems desion. He is a member of the AGM. the IEEE Comouter Socioly</article-title>
          . ande;!
          <article-title>B r l so CompJer Soc,ely. and s a follow 01 Ine !nstt.le 01 E eclrica Eng ncers Stephen Vilier has a BSc degree in computation from the University of Manchester Institute of Science' and Technology, an MSc degree in cognitive science from Manchester University, and a PhD in computer science</article-title>
          from Lancaster University.
          <article-title>He is currently a research leiiow in the Computing Department</article-title>
          at Lancaster University.
        </mixed-citation>
      </ref>
      <ref id="ref35">
        <mixed-citation>
          <article-title>His research interests are broadly within the fields of requirements engineering and computer supported cooperative work, focusing on improving suppolt for humar1 activity in the design of cooperative systems. He is a member of the IE!EE Computer Society and</article-title>
          the ACM.
        </mixed-citation>
      </ref>
    </ref-list>
  </back>
</article>